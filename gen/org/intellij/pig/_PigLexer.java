/* The following code was generated by JFlex 1.4.3 on 4/9/13 2:56 PM */

package org.intellij.pig;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import org.intellij.pig.psi.PigTypes;
import com.intellij.psi.TokenType;
import org.intellij.pig.psi.PigTypes;
import org.intellij.pig.psi.PigTokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 4/9/13 2:56 PM from the specification file
 * <tt>src/org/intellij/pig/Pig.flex</tt>
 */
public class _PigLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\21\1\4\1\16\1\0\1\4\1\16\16\21\4\0\1\4\1\65"+
    "\1\0\1\61\1\20\1\62\1\0\1\25\1\51\1\52\1\23\1\12"+
    "\1\47\1\24\1\10\1\22\1\5\7\2\2\1\1\17\1\50\1\64"+
    "\1\46\1\63\1\57\1\60\1\26\1\3\1\30\1\14\1\11\1\13"+
    "\1\31\1\35\1\42\1\67\1\45\1\7\1\41\1\43\1\36\1\40"+
    "\1\66\1\34\1\27\1\33\1\37\1\20\1\44\1\6\1\32\1\20"+
    "\1\53\1\15\1\54\1\0\1\20\1\0\1\26\1\3\1\30\1\14"+
    "\1\11\1\13\1\31\1\35\1\42\1\67\1\45\1\7\1\41\1\43"+
    "\1\36\1\40\1\66\1\34\1\27\1\33\1\37\1\20\1\44\1\6"+
    "\1\32\1\20\1\55\1\0\1\56\1\0\41\21\2\0\4\20\4\0"+
    "\1\20\2\0\1\21\7\0\1\20\4\0\1\20\5\0\27\20\1\0"+
    "\37\20\1\0\u013f\20\31\0\162\20\4\0\14\20\16\0\5\20\11\0"+
    "\1\20\21\0\130\21\5\0\23\21\12\0\1\20\13\0\1\20\1\0"+
    "\3\20\1\0\1\20\1\0\24\20\1\0\54\20\1\0\46\20\1\0"+
    "\5\20\4\0\202\20\1\0\4\21\3\0\105\20\1\0\46\20\2\0"+
    "\2\20\6\0\20\20\41\0\46\20\2\0\1\20\7\0\47\20\11\0"+
    "\21\21\1\0\27\21\1\0\3\21\1\0\1\21\1\0\2\21\1\0"+
    "\1\21\13\0\33\20\5\0\3\20\15\0\4\21\14\0\6\21\13\0"+
    "\32\20\5\0\13\20\16\21\7\0\12\21\4\0\2\20\1\21\143\20"+
    "\1\0\1\20\10\21\1\0\6\21\2\20\2\21\1\0\4\21\2\20"+
    "\12\21\3\20\2\0\1\20\17\0\1\21\1\20\1\21\36\20\33\21"+
    "\2\0\3\20\60\0\46\20\13\21\1\20\u014f\0\3\21\66\20\2\0"+
    "\1\21\1\20\20\21\2\0\1\20\4\21\3\0\12\20\2\21\2\0"+
    "\12\21\21\0\3\21\1\0\10\20\2\0\2\20\2\0\26\20\1\0"+
    "\7\20\1\0\1\20\3\0\4\20\2\0\1\21\1\20\7\21\2\0"+
    "\2\21\2\0\3\21\11\0\1\21\4\0\2\20\1\0\3\20\2\21"+
    "\2\0\12\21\4\20\15\0\3\21\1\0\6\20\4\0\2\20\2\0"+
    "\26\20\1\0\7\20\1\0\2\20\1\0\2\20\1\0\2\20\2\0"+
    "\1\21\1\0\5\21\4\0\2\21\2\0\3\21\13\0\4\20\1\0"+
    "\1\20\7\0\14\21\3\20\14\0\3\21\1\0\11\20\1\0\3\20"+
    "\1\0\26\20\1\0\7\20\1\0\2\20\1\0\5\20\2\0\1\21"+
    "\1\20\10\21\1\0\3\21\1\0\3\21\2\0\1\20\17\0\2\20"+
    "\2\21\2\0\12\21\1\0\1\20\17\0\3\21\1\0\10\20\2\0"+
    "\2\20\2\0\26\20\1\0\7\20\1\0\2\20\1\0\5\20\2\0"+
    "\1\21\1\20\6\21\3\0\2\21\2\0\3\21\10\0\2\21\4\0"+
    "\2\20\1\0\3\20\4\0\12\21\1\0\1\20\20\0\1\21\1\20"+
    "\1\0\6\20\3\0\3\20\1\0\4\20\3\0\2\20\1\0\1\20"+
    "\1\0\2\20\3\0\2\20\3\0\3\20\3\0\10\20\1\0\3\20"+
    "\4\0\5\21\3\0\3\21\1\0\4\21\11\0\1\21\17\0\11\21"+
    "\11\0\1\20\7\0\3\21\1\0\10\20\1\0\3\20\1\0\27\20"+
    "\1\0\12\20\1\0\5\20\4\0\7\21\1\0\3\21\1\0\4\21"+
    "\7\0\2\21\11\0\2\20\4\0\12\21\22\0\2\21\1\0\10\20"+
    "\1\0\3\20\1\0\27\20\1\0\12\20\1\0\5\20\2\0\1\21"+
    "\1\20\7\21\1\0\3\21\1\0\4\21\7\0\2\21\7\0\1\20"+
    "\1\0\2\20\4\0\12\21\22\0\2\21\1\0\10\20\1\0\3\20"+
    "\1\0\27\20\1\0\20\20\4\0\6\21\2\0\3\21\1\0\4\21"+
    "\11\0\1\21\10\0\2\20\4\0\12\21\22\0\2\21\1\0\22\20"+
    "\3\0\30\20\1\0\11\20\1\0\1\20\2\0\7\20\3\0\1\21"+
    "\4\0\6\21\1\0\1\21\1\0\10\21\22\0\2\21\15\0\60\20"+
    "\1\21\2\20\7\21\4\0\10\20\10\21\1\0\12\21\47\0\2\20"+
    "\1\0\1\20\2\0\2\20\1\0\1\20\2\0\1\20\6\0\4\20"+
    "\1\0\7\20\1\0\3\20\1\0\1\20\1\0\1\20\2\0\2\20"+
    "\1\0\4\20\1\21\2\20\6\21\1\0\2\21\1\20\2\0\5\20"+
    "\1\0\1\20\1\0\6\21\2\0\12\21\2\0\2\20\42\0\1\20"+
    "\27\0\2\21\6\0\12\21\13\0\1\21\1\0\1\21\1\0\1\21"+
    "\4\0\2\21\10\20\1\0\42\20\6\0\24\21\1\0\2\21\4\20"+
    "\4\0\10\21\1\0\44\21\11\0\1\21\71\0\42\20\1\0\5\20"+
    "\1\0\2\20\1\0\7\21\3\0\4\21\6\0\12\21\6\0\6\20"+
    "\4\21\106\0\46\20\12\0\51\20\7\0\132\20\5\0\104\20\5\0"+
    "\122\20\6\0\7\20\1\0\77\20\1\0\1\20\1\0\4\20\2\0"+
    "\7\20\1\0\1\20\1\0\4\20\2\0\47\20\1\0\1\20\1\0"+
    "\4\20\2\0\37\20\1\0\1\20\1\0\4\20\2\0\7\20\1\0"+
    "\1\20\1\0\4\20\2\0\7\20\1\0\7\20\1\0\27\20\1\0"+
    "\37\20\1\0\1\20\1\0\4\20\2\0\7\20\1\0\47\20\1\0"+
    "\23\20\16\0\11\21\56\0\125\20\14\0\u026c\20\2\0\10\20\12\0"+
    "\32\20\5\0\113\20\3\0\3\20\17\0\15\20\1\0\4\20\3\21"+
    "\13\0\22\20\3\21\13\0\22\20\2\21\14\0\15\20\1\0\3\20"+
    "\1\0\2\21\14\0\64\20\40\21\3\0\1\20\3\0\2\20\1\21"+
    "\2\0\12\21\41\0\3\21\2\0\12\21\6\0\130\20\10\0\51\20"+
    "\1\21\126\0\35\20\3\0\14\21\4\0\14\21\12\0\12\21\36\20"+
    "\2\0\5\20\u038b\0\154\20\224\0\234\20\4\0\132\20\6\0\26\20"+
    "\2\0\6\20\2\0\46\20\2\0\6\20\2\0\10\20\1\0\1\20"+
    "\1\0\1\20\1\0\1\20\1\0\37\20\2\0\65\20\1\0\7\20"+
    "\1\0\1\20\3\0\3\20\1\0\7\20\3\0\4\20\2\0\6\20"+
    "\4\0\15\20\5\0\3\20\1\0\7\20\17\0\4\21\32\0\5\21"+
    "\20\0\2\20\23\0\1\20\13\0\4\21\6\0\6\21\1\0\1\20"+
    "\15\0\1\20\40\0\22\20\36\0\15\21\4\0\1\21\3\0\6\21"+
    "\27\0\1\20\4\0\1\20\2\0\12\20\1\0\1\20\3\0\5\20"+
    "\6\0\1\20\1\0\1\20\1\0\1\20\1\0\4\20\1\0\3\20"+
    "\1\0\7\20\3\0\3\20\5\0\5\20\26\0\44\20\u0e81\0\3\20"+
    "\31\0\11\20\6\21\1\0\5\20\2\0\5\20\4\0\126\20\2\0"+
    "\2\21\2\0\3\20\1\0\137\20\5\0\50\20\4\0\136\20\21\0"+
    "\30\20\70\0\20\20\u0200\0\u19b6\20\112\0\u51a6\20\132\0\u048d\20\u0773\0"+
    "\u2ba4\20\u215c\0\u012e\20\2\0\73\20\225\0\7\20\14\0\5\20\5\0"+
    "\1\20\1\21\12\20\1\0\15\20\1\0\5\20\1\0\1\20\1\0"+
    "\2\20\1\0\2\20\1\0\154\20\41\0\u016b\20\22\0\100\20\2\0"+
    "\66\20\50\0\15\20\3\0\20\21\20\0\4\21\17\0\2\20\30\0"+
    "\3\20\31\0\1\20\6\0\5\20\1\0\207\20\2\0\1\21\4\0"+
    "\1\20\13\0\12\21\7\0\32\20\4\0\1\20\1\0\32\20\12\0"+
    "\132\20\3\0\6\20\2\0\6\20\2\0\6\20\2\0\3\20\3\0"+
    "\2\20\3\0\2\20\22\0\3\21\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\2\2\3\1\5"+
    "\1\3\1\6\2\3\1\7\1\10\1\11\1\12\1\13"+
    "\14\3\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\1\1\3\1\33\2\34\1\35\1\34\1\3\1\36"+
    "\1\0\2\2\1\3\1\37\2\3\1\40\1\41\12\3"+
    "\1\42\1\43\1\44\2\13\1\45\11\3\1\46\10\3"+
    "\1\47\6\3\1\50\1\51\1\3\1\52\2\3\1\53"+
    "\1\54\1\55\1\56\1\3\1\34\1\57\2\3\1\60"+
    "\20\3\1\43\1\61\1\62\1\63\10\3\1\64\16\3"+
    "\1\65\1\3\1\66\1\3\1\67\3\3\1\70\1\71"+
    "\1\72\5\3\1\73\3\3\1\74\3\3\1\75\1\3"+
    "\1\0\6\3\1\76\2\3\1\77\2\3\1\100\14\3"+
    "\1\101\1\3\1\102\1\103\1\3\1\104\1\3\1\105"+
    "\1\106\10\3\1\43\1\3\1\107\1\110\1\111\3\3"+
    "\1\112\1\113\2\3\1\114\1\3\1\115\1\116\1\117"+
    "\1\120\5\3\1\121\3\3\1\122\1\3\1\123\2\3"+
    "\1\124\1\3\1\125\4\3\1\126\7\3\1\127\1\130"+
    "\1\131\1\132\3\3\1\133\5\3\1\134\3\3\1\135"+
    "\1\136\1\3\1\137\1\140\1\3\1\141\3\3\1\142"+
    "\1\143\1\144\1\145\1\146\1\3\1\147";

  private static int [] zzUnpackAction() {
    int [] result = new int[313];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\250\0\340\0\u0118\0\u0150\0\u0188"+
    "\0\u01c0\0\u01f8\0\70\0\u0230\0\u0268\0\u02a0\0\u02d8\0\70"+
    "\0\u0310\0\u0348\0\u0380\0\u03b8\0\u03f0\0\u0428\0\u0460\0\u0498"+
    "\0\u04d0\0\u0508\0\u0540\0\u0578\0\u05b0\0\u05e8\0\u0620\0\70"+
    "\0\70\0\70\0\70\0\70\0\70\0\70\0\70\0\70"+
    "\0\70\0\70\0\70\0\u0658\0\u0690\0\u06c8\0\u0700\0\70"+
    "\0\u0738\0\u0770\0\70\0\70\0\u07a8\0\u07e0\0\u0818\0\u0850"+
    "\0\u0888\0\u08c0\0\u08f8\0\u0930\0\u0968\0\70\0\u0150\0\u09a0"+
    "\0\u09d8\0\u0a10\0\u0a48\0\u0a80\0\u0ab8\0\u0af0\0\u0b28\0\u0b60"+
    "\0\u0b98\0\70\0\u0bd0\0\u0c08\0\u0c40\0\70\0\u0c78\0\u0cb0"+
    "\0\u0ce8\0\u0d20\0\u0d58\0\u0d90\0\u0dc8\0\u0e00\0\u0e38\0\u0e70"+
    "\0\u0ea8\0\u0ee0\0\u0f18\0\u0f50\0\u0f88\0\u0fc0\0\u0ff8\0\u1030"+
    "\0\u1068\0\u10a0\0\u10d8\0\u1110\0\u1148\0\u1180\0\u11b8\0\u11f0"+
    "\0\u0150\0\u0150\0\u1228\0\u0150\0\u1260\0\u1298\0\70\0\70"+
    "\0\70\0\70\0\u12d0\0\u1308\0\u0150\0\u1340\0\u1378\0\u0150"+
    "\0\u13b0\0\u13e8\0\u1420\0\u1458\0\u1490\0\u14c8\0\u1500\0\u1538"+
    "\0\u1570\0\u15a8\0\u15e0\0\u1618\0\u1650\0\u1688\0\u16c0\0\u16f8"+
    "\0\u1730\0\u0150\0\u0150\0\u0150\0\u1768\0\u17a0\0\u17d8\0\u1810"+
    "\0\u1848\0\u1880\0\u18b8\0\u18f0\0\u0150\0\u1928\0\u1960\0\u1998"+
    "\0\u19d0\0\u1a08\0\u1a40\0\u1a78\0\u1ab0\0\u1ae8\0\u1b20\0\u1b58"+
    "\0\u1b90\0\u1bc8\0\u1c00\0\u1c38\0\u1c70\0\u1ca8\0\u1ce0\0\u0150"+
    "\0\u1d18\0\u1d50\0\u1d88\0\u0150\0\u0150\0\u0150\0\u1dc0\0\u1df8"+
    "\0\u1e30\0\u1e68\0\u1ea0\0\u0150\0\u1ed8\0\u1f10\0\u1f48\0\u0150"+
    "\0\u1f80\0\u1fb8\0\u1ff0\0\u0150\0\u2028\0\u2060\0\u2098\0\u20d0"+
    "\0\u2108\0\u2140\0\u2178\0\u21b0\0\u0150\0\u21e8\0\u2220\0\u0150"+
    "\0\u2258\0\u2290\0\u0150\0\u22c8\0\u2300\0\u2338\0\u2370\0\u23a8"+
    "\0\u23e0\0\u2418\0\u2450\0\u2488\0\u24c0\0\u24f8\0\u2530\0\u0150"+
    "\0\u2568\0\u0150\0\u0150\0\u25a0\0\u0150\0\u25d8\0\u0150\0\u0150"+
    "\0\u2610\0\u2648\0\u2680\0\u26b8\0\u26f0\0\u2728\0\u2760\0\u2798"+
    "\0\70\0\u27d0\0\u0150\0\u0150\0\u0150\0\u2808\0\u2840\0\u2878"+
    "\0\u0150\0\u0150\0\u28b0\0\u28e8\0\u0150\0\u2920\0\u0150\0\u0150"+
    "\0\u0150\0\u0150\0\u2958\0\u2990\0\u29c8\0\u2a00\0\u2a38\0\u0150"+
    "\0\u2a70\0\u2aa8\0\u2ae0\0\u0150\0\u2b18\0\u0150\0\u2b50\0\u2b88"+
    "\0\u0150\0\u2bc0\0\u0150\0\u2bf8\0\u2c30\0\u2c68\0\u2ca0\0\u0150"+
    "\0\u2cd8\0\u2d10\0\u2d48\0\u2d80\0\u2db8\0\u2df0\0\u2e28\0\u0150"+
    "\0\u0150\0\u0150\0\u0150\0\u2e60\0\u2e98\0\u2ed0\0\u0150\0\u2f08"+
    "\0\u2f40\0\u2f78\0\u2fb0\0\u2fe8\0\u0150\0\u3020\0\u3058\0\u3090"+
    "\0\u0150\0\u0150\0\u30c8\0\u0150\0\u0150\0\u3100\0\u0150\0\u3138"+
    "\0\u3170\0\u31a8\0\u0150\0\u0150\0\u0150\0\u0150\0\u0150\0\u31e0"+
    "\0\u0150";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[313];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\2\1\5\1\16\1\7"+
    "\1\2\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\7\1\27\1\30\1\7\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\2\7\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\7\1\57\71\0\2\3"+
    "\2\0\1\3\1\0\1\60\1\61\1\62\1\0\1\63"+
    "\1\64\54\0\3\7\1\0\3\7\1\0\1\7\1\0"+
    "\2\7\3\0\2\7\4\0\1\65\3\7\1\66\13\7"+
    "\20\0\2\7\4\0\1\5\11\0\1\5\52\0\1\67"+
    "\1\70\2\0\1\70\1\71\1\60\1\61\1\62\1\0"+
    "\1\63\1\64\54\0\3\7\1\0\3\7\1\0\1\7"+
    "\1\0\2\7\3\0\2\7\4\0\20\7\20\0\2\7"+
    "\1\0\3\7\1\0\3\7\1\0\1\72\1\0\2\7"+
    "\3\0\2\7\4\0\5\7\1\73\2\7\1\74\3\7"+
    "\1\75\3\7\20\0\2\7\1\0\2\61\2\0\1\61"+
    "\2\0\1\76\60\0\3\7\1\0\3\7\1\0\1\7"+
    "\1\0\2\7\3\0\2\7\4\0\20\7\20\0\1\77"+
    "\1\7\1\0\3\7\1\0\2\7\1\100\1\0\1\7"+
    "\1\0\2\7\3\0\2\7\4\0\1\101\7\7\1\102"+
    "\1\103\2\7\1\104\3\7\20\0\2\7\1\0\3\7"+
    "\1\0\3\7\1\0\1\105\1\0\2\7\3\0\2\7"+
    "\4\0\1\106\7\7\1\107\1\110\2\7\1\111\3\7"+
    "\20\0\2\7\17\0\1\112\73\0\1\113\70\0\1\114"+
    "\43\0\15\22\1\115\1\0\6\22\1\116\42\22\1\0"+
    "\3\7\1\0\3\7\1\0\1\7\1\0\2\7\3\0"+
    "\2\7\4\0\1\7\1\117\13\7\1\120\2\7\20\0"+
    "\2\7\1\0\3\7\1\0\3\7\1\0\1\121\1\0"+
    "\2\7\3\0\2\7\4\0\5\7\1\122\4\7\1\123"+
    "\5\7\20\0\2\7\1\0\3\7\1\0\3\7\1\0"+
    "\1\7\1\0\2\7\3\0\2\7\4\0\6\7\1\124"+
    "\1\125\1\126\1\127\6\7\20\0\2\7\1\0\3\7"+
    "\1\0\3\7\1\0\1\130\1\0\2\7\3\0\2\7"+
    "\4\0\5\7\1\131\1\132\11\7\20\0\2\7\1\0"+
    "\3\7\1\0\3\7\1\0\1\7\1\0\2\7\3\0"+
    "\2\7\4\0\6\7\1\133\2\7\1\134\6\7\20\0"+
    "\2\7\1\0\3\7\1\0\3\7\1\0\1\135\1\0"+
    "\2\7\3\0\2\7\4\0\1\136\7\7\1\137\3\7"+
    "\1\140\3\7\20\0\2\7\1\0\3\7\1\0\3\7"+
    "\1\0\1\7\1\0\2\7\3\0\2\7\4\0\5\7"+
    "\1\141\1\142\2\7\1\143\6\7\20\0\2\7\1\0"+
    "\3\7\1\0\3\7\1\0\1\7\1\0\2\7\3\0"+
    "\2\7\4\0\1\7\1\144\13\7\1\145\2\7\20\0"+
    "\2\7\1\0\3\7\1\0\3\7\1\0\1\7\1\0"+
    "\2\7\3\0\2\7\4\0\1\146\17\7\20\0\2\7"+
    "\1\0\3\7\1\0\3\7\1\0\1\7\1\0\2\7"+
    "\3\0\2\7\4\0\1\147\17\7\20\0\2\7\1\0"+
    "\3\7\1\0\2\7\1\150\1\0\1\7\1\0\1\151"+
    "\1\7\3\0\2\7\4\0\1\7\1\152\13\7\1\153"+
    "\2\7\20\0\2\7\1\0\3\7\1\0\3\7\1\0"+
    "\1\154\1\0\2\7\3\0\2\7\4\0\10\7\1\155"+
    "\1\156\6\7\20\0\2\7\46\0\1\157\67\0\1\160"+
    "\67\0\1\161\67\0\1\162\22\0\3\7\1\0\3\7"+
    "\1\0\1\7\1\0\2\7\3\0\2\7\4\0\10\7"+
    "\1\163\7\7\20\0\2\7\1\0\2\61\2\0\1\61"+
    "\3\0\1\62\1\0\1\63\1\64\54\0\2\164\2\0"+
    "\1\164\4\0\1\164\1\63\1\64\7\0\1\164\44\0"+
    "\3\7\1\0\3\7\1\0\1\7\1\0\2\7\3\0"+
    "\2\7\4\0\3\7\1\165\14\7\20\0\2\7\1\0"+
    "\3\7\1\0\3\7\1\0\1\7\1\0\2\7\3\0"+
    "\2\7\4\0\5\7\1\166\12\7\20\0\2\7\1\0"+
    "\2\67\2\0\1\67\2\0\1\61\1\62\1\0\1\63"+
    "\1\64\54\0\1\67\1\70\2\0\1\70\1\0\1\60"+
    "\1\61\1\62\1\0\1\63\1\64\54\0\3\71\1\0"+
    "\1\71\1\0\1\60\1\0\1\71\1\0\2\71\11\0"+
    "\1\71\1\0\1\71\40\0\3\7\1\0\3\7\1\0"+
    "\1\7\1\0\1\167\1\7\3\0\2\7\4\0\20\7"+
    "\20\0\2\7\1\0\3\7\1\0\3\7\1\0\1\170"+
    "\1\0\2\7\3\0\2\7\4\0\20\7\20\0\2\7"+
    "\1\0\3\7\1\0\3\7\1\0\1\7\1\0\2\7"+
    "\3\0\2\7\4\0\1\171\14\7\1\172\2\7\20\0"+
    "\2\7\1\0\3\7\1\0\3\7\1\0\1\7\1\0"+
    "\2\7\3\0\2\7\4\0\13\7\1\173\4\7\20\0"+
    "\2\7\1\0\3\7\1\0\3\7\1\0\1\7\1\0"+
    "\2\7\3\0\2\7\4\0\1\174\7\7\1\175\7\7"+
    "\20\0\2\7\1\0\3\7\1\0\2\7\1\176\1\0"+
    "\1\7\1\0\2\7\3\0\2\7\4\0\20\7\20\0"+
    "\2\7\1\0\3\7\1\0\3\7\1\0\1\7\1\0"+
    "\2\7\3\0\2\7\4\0\6\7\1\177\11\7\20\0"+
    "\2\7\1\0\3\7\1\0\2\7\1\200\1\0\1\7"+
    "\1\0\2\7\3\0\2\7\4\0\20\7\20\0\2\7"+
    "\1\0\3\7\1\0\2\7\1\201\1\0\1\7\1\0"+
    "\2\7\3\0\2\7\4\0\20\7\20\0\2\7\1\0"+
    "\3\7\1\0\3\7\1\0\1\7\1\0\1\202\1\7"+
    "\3\0\2\7\4\0\1\7\1\203\1\204\15\7\20\0"+
    "\2\7\1\0\3\7\1\0\3\7\1\0\1\7\1\0"+
    "\2\7\3\0\2\7\4\0\5\7\1\205\12\7\20\0"+
    "\2\7\1\0\3\7\1\0\3\7\1\0\1\7\1\0"+
    "\2\7\3\0\2\7\4\0\11\7\1\206\6\7\20\0"+
    "\2\7\1\0\3\7\1\0\3\7\1\0\1\7\1\0"+
    "\2\7\3\0\2\7\4\0\13\7\1\207\4\7\20\0"+
    "\2\7\1\0\3\7\1\0\3\7\1\0\1\7\1\0"+
    "\2\7\3\0\2\7\4\0\1\7\1\210\16\7\20\0"+
    "\2\7\23\211\1\0\44\211\16\114\1\0\51\114\16\22"+
    "\1\0\51\22\1\0\3\7\1\0\3\7\1\0\1\7"+
    "\1\0\2\7\3\0\2\7\4\0\2\7\1\212\15\7"+
    "\20\0\2\7\1\0\3\7\1\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\213\3\0\2\7\4\0\20\7\20\0"+
    "\2\7\1\0\3\7\1\0\3\7\1\0\1\7\1\0"+
    "\2\7\3\0\2\7\4\0\5\7\1\214\12\7\20\0"+
    "\2\7\1\0\3\7\1\0\3\7\1\0\1\7\1\0"+
    "\2\7\3\0\2\7\4\0\6\7\1\215\1\7\1\216"+
    "\7\7\20\0\2\7\1\0\3\7\1\0\2\7\1\217"+
    "\1\0\1\7\1\0\2\7\3\0\2\7\4\0\20\7"+
    "\20\0\2\7\1\0\3\7\1\0\3\7\1\0\1\7"+
    "\1\0\2\7\3\0\2\7\4\0\10\7\1\220\7\7"+
    "\20\0\2\7\1\0\3\7\1\0\3\7\1\0\1\7"+
    "\1\0\2\7\3\0\2\7\4\0\1\221\17\7\20\0"+
    "\2\7\1\0\3\7\1\0\3\7\1\0\1\7\1\0"+
    "\2\7\3\0\2\7\4\0\3\7\1\222\14\7\20\0"+
    "\2\7\1\0\2\7\1\223\1\0\3\7\1\0\1\7"+
    "\1\0\2\7\3\0\2\7\4\0\20\7\20\0\2\7"+
    "\1\0\3\7\1\0\3\7\1\0\1\7\1\0\2\7"+
    "\3\0\2\7\4\0\15\7\1\224\2\7\20\0\2\7"+
    "\1\0\3\7\1\0\3\7\1\0\1\225\1\0\2\7"+
    "\3\0\2\7\4\0\20\7\20\0\2\7\1\0\3\7"+
    "\1\0\3\7\1\0\1\7\1\0\2\7\3\0\2\7"+
    "\4\0\10\7\1\226\7\7\20\0\2\7\1\0\3\7"+
    "\1\0\3\7\1\0\1\7\1\0\2\7\3\0\2\7"+
    "\4\0\11\7\1\227\6\7\20\0\2\7\1\0\3\7"+
    "\1\0\3\7\1\0\1\7\1\0\2\7\3\0\2\7"+
    "\4\0\12\7\1\230\5\7\20\0\2\7\1\0\3\7"+
    "\1\0\3\7\1\0\1\7\1\0\2\7\3\0\2\7"+
    "\4\0\3\7\1\231\14\7\20\0\2\7\1\0\3\7"+
    "\1\0\3\7\1\0\1\7\1\0\2\7\3\0\2\7"+
    "\4\0\15\7\1\232\2\7\20\0\2\7\1\0\3\7"+
    "\1\0\2\7\1\233\1\0\1\7\1\0\2\7\3\0"+
    "\2\7\4\0\20\7\20\0\2\7\1\0\3\7\1\0"+
    "\3\7\1\0\1\7\1\0\2\7\3\0\2\7\4\0"+
    "\3\7\1\234\14\7\20\0\2\7\1\0\3\7\1\0"+
    "\3\7\1\0\1\7\1\0\2\7\3\0\2\7\4\0"+
    "\7\7\1\235\10\7\20\0\2\7\1\0\3\7\1\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\236\3\0\2\7"+
    "\4\0\20\7\20\0\2\7\1\0\3\7\1\0\3\7"+
    "\1\0\1\7\1\0\2\7\3\0\2\7\4\0\5\7"+
    "\1\237\12\7\20\0\2\7\1\0\3\7\1\0\3\7"+
    "\1\0\1\7\1\0\2\7\3\0\2\7\4\0\14\7"+
    "\1\240\3\7\20\0\2\7\1\0\3\7\1\0\3\7"+
    "\1\0\1\7\1\0\2\7\3\0\2\7\4\0\14\7"+
    "\1\241\3\7\20\0\2\7\1\0\3\7\1\0\3\7"+
    "\1\0\1\7\1\0\2\7\3\0\2\7\4\0\6\7"+
    "\1\242\11\7\20\0\2\7\1\0\3\7\1\0\3\7"+
    "\1\0\1\7\1\0\2\7\3\0\2\7\4\0\5\7"+
    "\1\243\4\7\1\244\5\7\20\0\2\7\1\0\3\7"+
    "\1\0\2\7\1\245\1\0\1\7\1\0\2\7\3\0"+
    "\2\7\4\0\20\7\20\0\2\7\1\0\3\7\1\0"+
    "\3\7\1\0\1\7\1\0\2\7\3\0\2\7\4\0"+
    "\5\7\1\246\7\7\1\247\2\7\20\0\2\7\1\0"+
    "\3\7\1\0\3\7\1\0\1\7\1\0\2\7\3\0"+
    "\2\7\4\0\5\7\1\250\12\7\20\0\2\7\1\0"+
    "\3\7\1\0\2\7\1\251\1\0\1\7\1\0\2\7"+
    "\3\0\2\7\4\0\20\7\20\0\2\7\1\0\3\7"+
    "\1\0\3\7\1\0\1\7\1\0\2\7\3\0\2\7"+
    "\4\0\14\7\1\252\3\7\20\0\2\7\1\0\2\164"+
    "\2\0\1\164\5\0\1\63\1\64\54\0\3\7\1\0"+
    "\3\7\1\0\1\253\1\0\2\7\3\0\2\7\4\0"+
    "\20\7\20\0\2\7\1\0\3\7\1\0\3\7\1\0"+
    "\1\7\1\0\2\7\3\0\2\7\4\0\5\7\1\254"+
    "\12\7\20\0\2\7\1\0\3\7\1\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\255\3\0\2\7\4\0\20\7"+
    "\20\0\2\7\1\0\3\7\1\0\3\7\1\0\1\7"+
    "\1\0\2\7\3\0\2\7\4\0\3\7\1\256\14\7"+
    "\20\0\2\7\1\0\3\7\1\0\3\7\1\0\1\7"+
    "\1\0\2\7\3\0\2\7\4\0\14\7\1\257\3\7"+
    "\20\0\2\7\1\0\3\7\1\0\3\7\1\0\1\7"+
    "\1\0\2\7\3\0\2\7\4\0\5\7\1\260\12\7"+
    "\20\0\2\7\1\0\3\7\1\0\3\7\1\0\1\7"+
    "\1\0\2\7\3\0\2\7\4\0\1\261\17\7\20\0"+
    "\2\7\1\0\3\7\1\0\3\7\1\0\1\7\1\0"+
    "\2\7\3\0\2\7\4\0\1\7\1\262\16\7\20\0"+
    "\2\7\1\0\3\7\1\0\3\7\1\0\1\263\1\0"+
    "\2\7\3\0\2\7\4\0\20\7\20\0\2\7\1\0"+
    "\3\7\1\0\2\7\1\264\1\0\1\7\1\0\2\7"+
    "\3\0\2\7\4\0\20\7\20\0\2\7\1\0\3\7"+
    "\1\0\3\7\1\0\1\7\1\0\2\7\3\0\2\7"+
    "\4\0\5\7\1\265\12\7\20\0\2\7\1\0\3\7"+
    "\1\0\3\7\1\0\1\7\1\0\2\7\3\0\2\7"+
    "\4\0\1\266\13\7\1\267\3\7\20\0\2\7\1\0"+
    "\3\7\1\0\3\7\1\0\1\7\1\0\2\7\3\0"+
    "\2\7\4\0\2\7\1\270\15\7\20\0\2\7\1\0"+
    "\3\7\1\0\2\7\1\271\1\0\1\7\1\0\2\7"+
    "\3\0\2\7\4\0\20\7\20\0\2\7\1\0\3\7"+
    "\1\0\3\7\1\0\1\272\1\0\2\7\3\0\2\7"+
    "\4\0\20\7\20\0\2\7\1\0\2\7\1\273\1\0"+
    "\3\7\1\0\1\7\1\0\2\7\3\0\2\7\4\0"+
    "\20\7\20\0\2\7\1\0\3\7\1\0\3\7\1\0"+
    "\1\7\1\0\2\7\3\0\2\7\4\0\12\7\1\274"+
    "\5\7\20\0\2\7\1\0\3\7\1\0\3\7\1\0"+
    "\1\7\1\0\2\7\3\0\2\7\4\0\5\7\1\275"+
    "\12\7\20\0\2\7\23\211\1\276\44\211\1\0\3\7"+
    "\1\0\3\7\1\0\1\277\1\0\2\7\3\0\2\7"+
    "\4\0\20\7\20\0\2\7\1\0\3\7\1\0\3\7"+
    "\1\0\1\7\1\0\2\7\3\0\2\7\4\0\6\7"+
    "\1\300\11\7\20\0\2\7\1\0\3\7\1\0\3\7"+
    "\1\0\1\7\1\0\2\7\3\0\2\7\4\0\14\7"+
    "\1\301\3\7\20\0\2\7\1\0\3\7\1\0\3\7"+
    "\1\0\1\7\1\0\2\7\3\0\2\7\4\0\1\7"+
    "\1\302\16\7\20\0\2\7\1\0\3\7\1\0\3\7"+
    "\1\0\1\7\1\0\2\7\3\0\2\7\4\0\6\7"+
    "\1\303\11\7\20\0\2\7\1\0\3\7\1\0\3\7"+
    "\1\0\1\7\1\0\2\7\3\0\2\7\4\0\6\7"+
    "\1\304\11\7\20\0\2\7\1\0\3\7\1\0\3\7"+
    "\1\0\1\305\1\0\2\7\3\0\2\7\4\0\20\7"+
    "\20\0\2\7\1\0\3\7\1\0\3\7\1\0\1\306"+
    "\1\0\2\7\3\0\2\7\4\0\20\7\20\0\2\7"+
    "\1\0\3\7\1\0\3\7\1\0\1\7\1\0\2\7"+
    "\3\0\2\7\4\0\11\7\1\307\6\7\20\0\2\7"+
    "\1\0\3\7\1\0\3\7\1\0\1\310\1\0\2\7"+
    "\3\0\2\7\4\0\20\7\20\0\2\7\1\0\3\7"+
    "\1\0\2\7\1\311\1\0\1\7\1\0\2\7\3\0"+
    "\2\7\4\0\20\7\20\0\2\7\1\0\3\7\1\0"+
    "\3\7\1\0\1\7\1\0\2\7\3\0\2\7\4\0"+
    "\14\7\1\312\3\7\20\0\2\7\1\0\3\7\1\0"+
    "\3\7\1\0\1\7\1\0\2\7\3\0\2\7\4\0"+
    "\17\7\1\313\20\0\2\7\1\0\3\7\1\0\2\7"+
    "\1\314\1\0\1\7\1\0\2\7\3\0\2\7\4\0"+
    "\20\7\20\0\2\7\1\0\3\7\1\0\3\7\1\0"+
    "\1\7\1\0\2\7\3\0\2\7\4\0\7\7\1\315"+
    "\10\7\20\0\2\7\1\0\3\7\1\0\3\7\1\0"+
    "\1\316\1\0\2\7\3\0\2\7\4\0\20\7\20\0"+
    "\2\7\1\0\3\7\1\0\3\7\1\0\1\317\1\0"+
    "\2\7\3\0\2\7\4\0\20\7\20\0\2\7\1\0"+
    "\3\7\1\0\3\7\1\0\1\320\1\0\2\7\3\0"+
    "\2\7\4\0\20\7\20\0\2\7\1\0\3\7\1\0"+
    "\3\7\1\0\1\7\1\0\2\7\3\0\2\7\4\0"+
    "\15\7\1\321\2\7\20\0\2\7\1\0\3\7\1\0"+
    "\3\7\1\0\1\7\1\0\2\7\3\0\2\7\4\0"+
    "\10\7\1\322\7\7\20\0\2\7\1\0\3\7\1\0"+
    "\3\7\1\0\1\7\1\0\2\7\3\0\2\7\4\0"+
    "\1\323\4\7\1\324\12\7\20\0\2\7\1\0\3\7"+
    "\1\0\3\7\1\0\1\7\1\0\2\7\3\0\2\7"+
    "\4\0\2\7\1\325\15\7\20\0\2\7\1\0\3\7"+
    "\1\0\3\7\1\0\1\7\1\0\2\7\3\0\2\7"+
    "\4\0\6\7\1\326\11\7\20\0\2\7\1\0\3\7"+
    "\1\0\3\7\1\0\1\7\1\0\2\7\3\0\2\7"+
    "\4\0\11\7\1\327\6\7\20\0\2\7\1\0\3\7"+
    "\1\0\3\7\1\0\1\7\1\0\2\7\3\0\2\7"+
    "\4\0\10\7\1\330\7\7\20\0\2\7\1\0\3\7"+
    "\1\0\3\7\1\0\1\331\1\0\2\7\3\0\2\7"+
    "\4\0\20\7\20\0\2\7\1\0\3\7\1\0\2\7"+
    "\1\332\1\0\1\7\1\0\2\7\3\0\2\7\4\0"+
    "\20\7\20\0\2\7\1\0\3\7\1\0\3\7\1\0"+
    "\1\7\1\0\2\7\3\0\2\7\4\0\15\7\1\333"+
    "\2\7\20\0\2\7\1\0\3\7\1\0\3\7\1\0"+
    "\1\7\1\0\2\7\3\0\2\7\4\0\1\334\17\7"+
    "\20\0\2\7\1\0\3\7\1\0\3\7\1\0\1\7"+
    "\1\0\2\7\3\0\2\7\4\0\5\7\1\335\12\7"+
    "\20\0\2\7\1\0\3\7\1\0\3\7\1\0\1\7"+
    "\1\0\2\7\3\0\2\7\4\0\5\7\1\336\12\7"+
    "\20\0\2\7\1\0\3\7\1\0\3\7\1\0\1\7"+
    "\1\0\2\7\3\0\2\7\4\0\5\7\1\337\12\7"+
    "\20\0\2\7\1\0\3\7\1\0\3\7\1\0\1\340"+
    "\1\0\2\7\3\0\2\7\4\0\20\7\20\0\2\7"+
    "\1\0\3\7\1\0\3\7\1\0\1\7\1\0\2\7"+
    "\3\0\2\7\4\0\1\341\17\7\20\0\2\7\1\0"+
    "\3\7\1\0\3\7\1\0\1\342\1\0\2\7\3\0"+
    "\2\7\4\0\20\7\20\0\2\7\1\0\3\7\1\0"+
    "\3\7\1\0\1\7\1\0\2\7\3\0\2\7\4\0"+
    "\11\7\1\343\6\7\20\0\2\7\1\0\3\7\1\0"+
    "\3\7\1\0\1\7\1\0\2\7\3\0\2\7\4\0"+
    "\15\7\1\344\2\7\20\0\2\7\1\0\3\7\1\0"+
    "\3\7\1\0\1\7\1\0\2\7\3\0\2\7\4\0"+
    "\1\345\17\7\20\0\2\7\1\0\3\7\1\0\3\7"+
    "\1\0\1\7\1\0\2\7\3\0\2\7\4\0\5\7"+
    "\1\346\12\7\20\0\2\7\1\0\3\7\1\0\2\7"+
    "\1\347\1\0\1\7\1\0\2\7\3\0\2\7\4\0"+
    "\20\7\20\0\2\7\1\0\3\7\1\0\3\7\1\0"+
    "\1\7\1\0\2\7\3\0\2\7\4\0\14\7\1\350"+
    "\3\7\20\0\2\7\22\211\1\351\1\276\44\211\1\0"+
    "\3\7\1\0\3\7\1\0\1\7\1\0\2\7\3\0"+
    "\2\7\4\0\1\352\17\7\20\0\2\7\1\0\3\7"+
    "\1\0\3\7\1\0\1\353\1\0\2\7\3\0\2\7"+
    "\4\0\20\7\20\0\2\7\1\0\3\7\1\0\3\7"+
    "\1\0\1\7\1\0\2\7\3\0\2\7\4\0\5\7"+
    "\1\354\12\7\20\0\2\7\1\0\3\7\1\0\3\7"+
    "\1\0\1\7\1\0\2\7\3\0\2\7\4\0\1\7"+
    "\1\355\16\7\20\0\2\7\1\0\3\7\1\0\3\7"+
    "\1\0\1\7\1\0\2\7\3\0\2\7\4\0\1\356"+
    "\17\7\20\0\2\7\1\0\3\7\1\0\3\7\1\0"+
    "\1\7\1\0\2\7\3\0\2\7\4\0\10\7\1\357"+
    "\7\7\20\0\2\7\1\0\3\7\1\0\3\7\1\0"+
    "\1\7\1\0\2\7\3\0\2\7\4\0\6\7\1\360"+
    "\11\7\20\0\2\7\1\0\3\7\1\0\3\7\1\0"+
    "\1\7\1\0\2\7\3\0\2\7\4\0\12\7\1\361"+
    "\5\7\20\0\2\7\1\0\3\7\1\0\3\7\1\0"+
    "\1\362\1\0\2\7\3\0\2\7\4\0\20\7\20\0"+
    "\2\7\1\0\3\7\1\0\3\7\1\0\1\7\1\0"+
    "\2\7\3\0\2\7\4\0\1\7\1\363\16\7\20\0"+
    "\2\7\1\0\3\7\1\0\3\7\1\0\1\7\1\0"+
    "\2\7\3\0\2\7\4\0\11\7\1\364\6\7\20\0"+
    "\2\7\1\0\3\7\1\0\3\7\1\0\1\7\1\0"+
    "\2\7\3\0\2\7\4\0\5\7\1\365\12\7\20\0"+
    "\2\7\1\0\3\7\1\0\3\7\1\0\1\7\1\0"+
    "\2\7\3\0\2\7\4\0\6\7\1\366\11\7\20\0"+
    "\2\7\1\0\3\7\1\0\3\7\1\0\1\7\1\0"+
    "\2\7\3\0\2\7\4\0\6\7\1\367\11\7\20\0"+
    "\2\7\1\0\3\7\1\0\3\7\1\0\1\7\1\0"+
    "\2\7\3\0\2\7\4\0\6\7\1\370\11\7\20\0"+
    "\2\7\1\0\3\7\1\0\3\7\1\0\1\7\1\0"+
    "\2\7\3\0\2\7\4\0\3\7\1\371\14\7\20\0"+
    "\2\7\1\0\3\7\1\0\3\7\1\0\1\7\1\0"+
    "\2\7\3\0\2\7\4\0\15\7\1\372\2\7\20\0"+
    "\2\7\1\0\3\7\1\0\2\7\1\373\1\0\1\7"+
    "\1\0\2\7\3\0\2\7\4\0\20\7\20\0\2\7"+
    "\1\0\3\7\1\0\3\7\1\0\1\7\1\0\2\7"+
    "\3\0\2\7\4\0\14\7\1\374\3\7\20\0\2\7"+
    "\1\0\3\7\1\0\3\7\1\0\1\7\1\0\2\7"+
    "\3\0\2\7\4\0\7\7\1\375\10\7\20\0\2\7"+
    "\1\0\3\7\1\0\3\7\1\0\1\376\1\0\2\7"+
    "\3\0\2\7\4\0\20\7\20\0\2\7\1\0\3\7"+
    "\1\0\3\7\1\0\1\7\1\0\2\7\3\0\2\7"+
    "\4\0\1\7\1\377\16\7\20\0\2\7\1\0\3\7"+
    "\1\0\3\7\1\0\1\7\1\0\2\7\3\0\2\7"+
    "\4\0\6\7\1\u0100\11\7\20\0\2\7\1\0\3\7"+
    "\1\0\3\7\1\0\1\7\1\0\2\7\3\0\2\7"+
    "\4\0\6\7\1\u0101\11\7\20\0\2\7\1\0\3\7"+
    "\1\0\3\7\1\0\1\u0102\1\0\2\7\3\0\2\7"+
    "\4\0\20\7\20\0\2\7\1\0\3\7\1\0\3\7"+
    "\1\0\1\7\1\0\2\7\3\0\2\7\4\0\2\7"+
    "\1\u0103\15\7\20\0\2\7\1\0\3\7\1\0\3\7"+
    "\1\0\1\7\1\0\2\7\3\0\2\7\4\0\6\7"+
    "\1\u0104\11\7\20\0\2\7\1\0\3\7\1\0\2\7"+
    "\1\u0105\1\0\1\7\1\0\2\7\3\0\2\7\4\0"+
    "\20\7\20\0\2\7\1\0\3\7\1\0\3\7\1\0"+
    "\1\u0106\1\0\2\7\3\0\2\7\4\0\20\7\20\0"+
    "\2\7\1\0\3\7\1\0\3\7\1\0\1\7\1\0"+
    "\2\7\3\0\2\7\4\0\6\7\1\u0107\11\7\20\0"+
    "\2\7\1\0\3\7\1\0\3\7\1\0\1\7\1\0"+
    "\2\7\3\0\2\7\4\0\14\7\1\u0108\3\7\20\0"+
    "\2\7\1\0\3\7\1\0\3\7\1\0\1\u0109\1\0"+
    "\2\7\3\0\2\7\4\0\20\7\20\0\2\7\1\0"+
    "\3\7\1\0\3\7\1\0\1\7\1\0\2\7\3\0"+
    "\2\7\4\0\15\7\1\u010a\2\7\20\0\2\7\1\0"+
    "\3\7\1\0\3\7\1\0\1\7\1\0\2\7\3\0"+
    "\2\7\4\0\13\7\1\u010b\4\7\20\0\2\7\1\0"+
    "\3\7\1\0\3\7\1\0\1\7\1\0\2\7\3\0"+
    "\2\7\4\0\6\7\1\u010c\11\7\20\0\2\7\1\0"+
    "\3\7\1\0\3\7\1\0\1\7\1\0\2\7\3\0"+
    "\2\7\4\0\11\7\1\u010d\6\7\20\0\2\7\1\0"+
    "\3\7\1\0\3\7\1\0\1\7\1\0\2\7\3\0"+
    "\2\7\4\0\1\u010e\17\7\20\0\2\7\1\0\3\7"+
    "\1\0\3\7\1\0\1\7\1\0\2\7\3\0\2\7"+
    "\4\0\5\7\1\u010f\12\7\20\0\2\7\1\0\3\7"+
    "\1\0\3\7\1\0\1\7\1\0\2\7\3\0\2\7"+
    "\4\0\12\7\1\u0110\5\7\20\0\2\7\1\0\3\7"+
    "\1\0\3\7\1\0\1\7\1\0\2\7\3\0\2\7"+
    "\4\0\16\7\1\u0111\1\7\20\0\2\7\1\0\3\7"+
    "\1\0\2\7\1\u0112\1\0\1\7\1\0\2\7\3\0"+
    "\2\7\4\0\20\7\20\0\2\7\1\0\3\7\1\0"+
    "\3\7\1\0\1\7\1\0\2\7\3\0\2\7\4\0"+
    "\5\7\1\u0113\12\7\20\0\2\7\1\0\3\7\1\0"+
    "\3\7\1\0\1\u0114\1\0\2\7\3\0\2\7\4\0"+
    "\20\7\20\0\2\7\1\0\3\7\1\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\u0115\3\0\2\7\4\0\20\7"+
    "\20\0\2\7\1\0\3\7\1\0\3\7\1\0\1\7"+
    "\1\0\2\7\3\0\2\7\4\0\5\7\1\u0116\12\7"+
    "\20\0\2\7\1\0\3\7\1\0\3\7\1\0\1\7"+
    "\1\0\2\7\3\0\2\7\4\0\6\7\1\u0117\11\7"+
    "\20\0\2\7\1\0\3\7\1\0\3\7\1\0\1\7"+
    "\1\0\2\7\3\0\2\7\4\0\15\7\1\u0118\2\7"+
    "\20\0\2\7\1\0\3\7\1\0\3\7\1\0\1\7"+
    "\1\0\2\7\3\0\2\7\4\0\7\7\1\u0119\10\7"+
    "\20\0\2\7\1\0\3\7\1\0\3\7\1\0\1\7"+
    "\1\0\2\7\3\0\2\7\4\0\5\7\1\u011a\12\7"+
    "\20\0\2\7\1\0\3\7\1\0\3\7\1\0\1\u011b"+
    "\1\0\2\7\3\0\2\7\4\0\20\7\20\0\2\7"+
    "\1\0\3\7\1\0\3\7\1\0\1\7\1\0\2\7"+
    "\3\0\2\7\4\0\13\7\1\u011c\4\7\20\0\2\7"+
    "\1\0\3\7\1\0\3\7\1\0\1\7\1\0\2\7"+
    "\3\0\2\7\4\0\2\7\1\u011d\15\7\20\0\2\7"+
    "\1\0\3\7\1\0\3\7\1\0\1\7\1\0\2\7"+
    "\3\0\2\7\4\0\6\7\1\u011e\11\7\20\0\2\7"+
    "\1\0\3\7\1\0\3\7\1\0\1\7\1\0\2\7"+
    "\3\0\2\7\4\0\12\7\1\u011f\5\7\20\0\2\7"+
    "\1\0\3\7\1\0\3\7\1\0\1\7\1\0\2\7"+
    "\3\0\2\7\4\0\5\7\1\u0120\12\7\20\0\2\7"+
    "\1\0\3\7\1\0\3\7\1\0\1\u0121\1\0\2\7"+
    "\3\0\2\7\4\0\20\7\20\0\2\7\1\0\3\7"+
    "\1\0\3\7\1\0\1\7\1\0\2\7\3\0\2\7"+
    "\4\0\14\7\1\u0122\3\7\20\0\2\7\1\0\3\7"+
    "\1\0\3\7\1\0\1\u0123\1\0\2\7\3\0\2\7"+
    "\4\0\20\7\20\0\2\7\1\0\3\7\1\0\3\7"+
    "\1\0\1\7\1\0\2\7\3\0\2\7\4\0\14\7"+
    "\1\u0124\3\7\20\0\2\7\1\0\3\7\1\0\3\7"+
    "\1\0\1\7\1\0\2\7\3\0\2\7\4\0\1\7"+
    "\1\u0125\16\7\20\0\2\7\1\0\3\7\1\0\3\7"+
    "\1\0\1\7\1\0\2\7\3\0\2\7\4\0\11\7"+
    "\1\u0126\6\7\20\0\2\7\1\0\3\7\1\0\3\7"+
    "\1\0\1\7\1\0\2\7\3\0\2\7\4\0\6\7"+
    "\1\u0127\11\7\20\0\2\7\1\0\3\7\1\0\3\7"+
    "\1\0\1\7\1\0\2\7\3\0\2\7\4\0\1\u0128"+
    "\17\7\20\0\2\7\1\0\3\7\1\0\3\7\1\0"+
    "\1\u0129\1\0\2\7\3\0\2\7\4\0\20\7\20\0"+
    "\2\7\1\0\3\7\1\0\3\7\1\0\1\7\1\0"+
    "\2\7\3\0\2\7\4\0\5\7\1\u012a\12\7\20\0"+
    "\2\7\1\0\3\7\1\0\3\7\1\0\1\7\1\0"+
    "\2\7\3\0\2\7\4\0\1\u012b\17\7\20\0\2\7"+
    "\1\0\3\7\1\0\3\7\1\0\1\u012c\1\0\2\7"+
    "\3\0\2\7\4\0\20\7\20\0\2\7\1\0\3\7"+
    "\1\0\3\7\1\0\1\7\1\0\2\7\3\0\2\7"+
    "\4\0\6\7\1\u012d\11\7\20\0\2\7\1\0\3\7"+
    "\1\0\3\7\1\0\1\7\1\0\2\7\3\0\2\7"+
    "\4\0\1\7\1\u012e\16\7\20\0\2\7\1\0\3\7"+
    "\1\0\2\7\1\u012f\1\0\1\7\1\0\2\7\3\0"+
    "\2\7\4\0\20\7\20\0\2\7\1\0\3\7\1\0"+
    "\3\7\1\0\1\7\1\0\2\7\3\0\2\7\4\0"+
    "\10\7\1\u0130\7\7\20\0\2\7\1\0\3\7\1\0"+
    "\3\7\1\0\1\7\1\0\2\7\3\0\2\7\4\0"+
    "\2\7\1\u0131\15\7\20\0\2\7\1\0\3\7\1\0"+
    "\3\7\1\0\1\7\1\0\2\7\3\0\2\7\4\0"+
    "\1\u0132\17\7\20\0\2\7\1\0\3\7\1\0\3\7"+
    "\1\0\1\7\1\0\2\7\3\0\2\7\4\0\4\7"+
    "\1\u0133\13\7\20\0\2\7\1\0\3\7\1\0\3\7"+
    "\1\0\1\7\1\0\2\7\3\0\2\7\4\0\4\7"+
    "\1\u0134\13\7\20\0\2\7\1\0\3\7\1\0\3\7"+
    "\1\0\1\u0135\1\0\2\7\3\0\2\7\4\0\20\7"+
    "\20\0\2\7\1\0\3\7\1\0\3\7\1\0\1\7"+
    "\1\0\2\7\3\0\2\7\4\0\15\7\1\u0136\2\7"+
    "\20\0\2\7\1\0\3\7\1\0\3\7\1\0\1\u0137"+
    "\1\0\2\7\3\0\2\7\4\0\20\7\20\0\2\7"+
    "\1\0\3\7\1\0\3\7\1\0\1\7\1\0\2\7"+
    "\3\0\2\7\4\0\5\7\1\u0138\12\7\20\0\2\7"+
    "\1\0\3\7\1\0\3\7\1\0\1\u0139\1\0\2\7"+
    "\3\0\2\7\4\0\20\7\20\0\2\7";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12824];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\10\1\1\11\4\1\1\11\17\1\14\11"+
    "\4\1\1\11\2\1\2\11\2\1\1\0\6\1\1\11"+
    "\13\1\1\11\3\1\1\11\40\1\4\11\113\1\1\0"+
    "\52\1\1\11\120\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[313];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  public _PigLexer() {
    this((java.io.Reader)null);
  }


  public _PigLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _PigLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1812) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 64: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_RANK;
          }
        case 104: break;
        case 101: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_PARTITION;
          }
        case 105: break;
        case 95: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_GENERATE;
          }
        case 106: break;
        case 55: 
          { yybegin(YYINITIAL);    return PigTypes.PIG_NOT;
          }
        case 107: break;
        case 57: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_LOAD;
          }
        case 108: break;
        case 86: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_ROLLUP;
          }
        case 109: break;
        case 16: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_RP;
          }
        case 110: break;
        case 46: 
          { yybegin(YYINITIAL); return PigTypes.PIG_NOTEQ;
          }
        case 111: break;
        case 83: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_DEFINE;
          }
        case 112: break;
        case 23: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_POUND;
          }
        case 113: break;
        case 94: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_DISTINCT;
          }
        case 114: break;
        case 80: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_UNION;
          }
        case 115: break;
        case 12: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_EQUAL;
          }
        case 116: break;
        case 19: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_LBRACE;
          }
        case 117: break;
        case 32: 
          { yybegin(YYINITIAL); return PigTypes.PIG_DOUBLE_DOT;
          }
        case 118: break;
        case 30: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_BY;
          }
        case 119: break;
        case 37: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_AS;
          }
        case 120: break;
        case 47: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_BAG;
          }
        case 121: break;
        case 7: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_COLON;
          }
        case 122: break;
        case 58: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_LONG;
          }
        case 123: break;
        case 6: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_PLUS;
          }
        case 124: break;
        case 71: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_STORE;
          }
        case 125: break;
        case 91: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_COGROUP;
          }
        case 126: break;
        case 66: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_NULL;
          }
        case 127: break;
        case 88: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_FOREACH;
          }
        case 128: break;
        case 49: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_ASC;
          }
        case 129: break;
        case 65: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_INTO;
          }
        case 130: break;
        case 89: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_DEFAULT;
          }
        case 131: break;
        case 31: 
          { yybegin(YYINITIAL);       return PigTypes.PIG_STR_OP_LT;
          }
        case 132: break;
        case 15: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_LP;
          }
        case 133: break;
        case 4: 
          { return TokenType.WHITE_SPACE;
          }
        case 134: break;
        case 79: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_USING;
          }
        case 135: break;
        case 3: 
          { yybegin(YYINITIAL); return PigTypes.PIG_ID;
          }
        case 136: break;
        case 50: 
          { yybegin(YYINITIAL);    return PigTypes.PIG_AND;
          }
        case 137: break;
        case 75: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_TUPLE;
          }
        case 138: break;
        case 13: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_COMMA;
          }
        case 139: break;
        case 51: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_SET;
          }
        case 140: break;
        case 14: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_SIMI;
          }
        case 141: break;
        case 102: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_MAPREDUCE;
          }
        case 142: break;
        case 61: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_DUMP;
          }
        case 143: break;
        case 67: 
          { yybegin(YYINITIAL);   return PigTypes.PIG_JOIN;
          }
        case 144: break;
        case 38: 
          { yybegin(YYINITIAL);       return PigTypes.PIG_STR_OP_GT;
          }
        case 145: break;
        case 85: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_STREAM;
          }
        case 146: break;
        case 90: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_DECLARE;
          }
        case 147: break;
        case 28: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_DOUBLE_LITERAL;
          }
        case 148: break;
        case 103: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_ILLUSTRATE;
          }
        case 149: break;
        case 98: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_BYTEARRAY;
          }
        case 150: break;
        case 11: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_QUOTEDSTRING;
          }
        case 151: break;
        case 8: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_DIV;
          }
        case 152: break;
        case 22: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_ARROBA;
          }
        case 153: break;
        case 18: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_RBRACKET;
          }
        case 154: break;
        case 100: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_OTHERWISE;
          }
        case 155: break;
        case 1: 
          { return TokenType.BAD_CHARACTER;
          }
        case 156: break;
        case 44: 
          { yybegin(YYINITIAL); return PigTypes.PIG_GTEQ;
          }
        case 157: break;
        case 9: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_STAR;
          }
        case 158: break;
        case 70: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_FALSE;
          }
        case 159: break;
        case 26: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_LT;
          }
        case 160: break;
        case 42: 
          { yybegin(YYINITIAL);       return PigTypes.PIG_STR_OP_NE;
          }
        case 161: break;
        case 52: 
          { yybegin(YYINITIAL);      return PigTypes.PIG_STR_OP_GTE;
          }
        case 162: break;
        case 2: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_INTEGER_LITERAL;
          }
        case 163: break;
        case 5: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_DOT;
          }
        case 164: break;
        case 45: 
          { yybegin(YYINITIAL); return PigTypes.PIG_LTEQ;
          }
        case 165: break;
        case 34: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_DCOLON;
          }
        case 166: break;
        case 82: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_FILTER;
          }
        case 167: break;
        case 87: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_FLATTEN;
          }
        case 168: break;
        case 27: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_LONG_LITERAL;
          }
        case 169: break;
        case 72: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_SPLIT;
          }
        case 170: break;
        case 59: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_FULL;
          }
        case 171: break;
        case 84: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_DOUBLE;
          }
        case 172: break;
        case 92: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_STR_OP_MATCHES;
          }
        case 173: break;
        case 62: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_CUBE;
          }
        case 174: break;
        case 73: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_CROSS;
          }
        case 175: break;
        case 96: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_REGISTER;
          }
        case 176: break;
        case 69: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_FLOAT;
          }
        case 177: break;
        case 76: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_RIGHT;
          }
        case 178: break;
        case 48: 
          { yybegin(YYINITIAL);      return PigTypes.PIG_STR_OP_LTE;
          }
        case 179: break;
        case 25: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_GT;
          }
        case 180: break;
        case 17: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_LBRACKET;
          }
        case 181: break;
        case 78: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_OUTER;
          }
        case 182: break;
        case 74: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_GROUP;
          }
        case 183: break;
        case 36: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_END_OF_LINE_COMMENT;
          }
        case 184: break;
        case 54: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_INT;
          }
        case 185: break;
        case 21: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_QMARK;
          }
        case 186: break;
        case 24: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_PERCENT;
          }
        case 187: break;
        case 63: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_TRUE;
          }
        case 188: break;
        case 99: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_CHARARRAY;
          }
        case 189: break;
        case 93: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_DATETIME;
          }
        case 190: break;
        case 39: 
          { yybegin(YYINITIAL);     return PigTypes.PIG_OR;
          }
        case 191: break;
        case 41: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_IS;
          }
        case 192: break;
        case 56: 
          { yybegin(YYINITIAL);   return PigTypes.PIG_LEFT;
          }
        case 193: break;
        case 43: 
          { yybegin(YYINITIAL); return PigTypes.PIG_EQEQ;
          }
        case 194: break;
        case 60: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_DESC;
          }
        case 195: break;
        case 97: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_PARALLEL;
          }
        case 196: break;
        case 10: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_MINUS;
          }
        case 197: break;
        case 29: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_FLOAT_LITERAL;
          }
        case 198: break;
        case 77: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_ORDER;
          }
        case 199: break;
        case 68: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_LIMIT;
          }
        case 200: break;
        case 33: 
          { yybegin(YYINITIAL);       return PigTypes.PIG_STR_OP_EQ;
          }
        case 201: break;
        case 20: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_RBRACE;
          }
        case 202: break;
        case 53: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_MAP;
          }
        case 203: break;
        case 40: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_IF;
          }
        case 204: break;
        case 35: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_C_STYLE_COMMENT;
          }
        case 205: break;
        case 81: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_INNER;
          }
        case 206: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
