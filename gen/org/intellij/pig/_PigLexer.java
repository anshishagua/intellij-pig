/* The following code was generated by JFlex 1.4.3 on 4/9/13 6:56 PM */

package org.intellij.pig;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import org.intellij.pig.psi.PigTypes;
import com.intellij.psi.TokenType;
import org.intellij.pig.psi.PigTypes;
import org.intellij.pig.psi.PigTokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 4/9/13 6:56 PM from the specification file
 * <tt>src/org/intellij/pig/Pig.flex</tt>
 */
public class _PigLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\22\1\4\1\17\1\0\1\4\1\17\16\22\4\0\1\4\1\66"+
    "\1\0\1\62\1\21\1\63\1\0\1\26\1\52\1\53\1\24\1\12"+
    "\1\50\1\25\1\10\1\23\1\5\7\2\2\1\1\20\1\51\1\65"+
    "\1\47\1\64\1\60\1\61\1\27\1\3\1\31\1\14\1\11\1\13"+
    "\1\32\1\36\1\43\1\70\1\46\1\7\1\42\1\44\1\37\1\41"+
    "\1\67\1\35\1\30\1\34\1\40\1\21\1\45\1\6\1\33\1\21"+
    "\1\54\1\16\1\55\1\0\1\21\1\15\1\27\1\3\1\31\1\14"+
    "\1\11\1\13\1\32\1\36\1\43\1\70\1\46\1\7\1\42\1\44"+
    "\1\37\1\41\1\67\1\35\1\30\1\34\1\40\1\21\1\45\1\6"+
    "\1\33\1\21\1\56\1\0\1\57\1\0\41\22\2\0\4\21\4\0"+
    "\1\21\2\0\1\22\7\0\1\21\4\0\1\21\5\0\27\21\1\0"+
    "\37\21\1\0\u013f\21\31\0\162\21\4\0\14\21\16\0\5\21\11\0"+
    "\1\21\21\0\130\22\5\0\23\22\12\0\1\21\13\0\1\21\1\0"+
    "\3\21\1\0\1\21\1\0\24\21\1\0\54\21\1\0\46\21\1\0"+
    "\5\21\4\0\202\21\1\0\4\22\3\0\105\21\1\0\46\21\2\0"+
    "\2\21\6\0\20\21\41\0\46\21\2\0\1\21\7\0\47\21\11\0"+
    "\21\22\1\0\27\22\1\0\3\22\1\0\1\22\1\0\2\22\1\0"+
    "\1\22\13\0\33\21\5\0\3\21\15\0\4\22\14\0\6\22\13\0"+
    "\32\21\5\0\13\21\16\22\7\0\12\22\4\0\2\21\1\22\143\21"+
    "\1\0\1\21\10\22\1\0\6\22\2\21\2\22\1\0\4\22\2\21"+
    "\12\22\3\21\2\0\1\21\17\0\1\22\1\21\1\22\36\21\33\22"+
    "\2\0\3\21\60\0\46\21\13\22\1\21\u014f\0\3\22\66\21\2\0"+
    "\1\22\1\21\20\22\2\0\1\21\4\22\3\0\12\21\2\22\2\0"+
    "\12\22\21\0\3\22\1\0\10\21\2\0\2\21\2\0\26\21\1\0"+
    "\7\21\1\0\1\21\3\0\4\21\2\0\1\22\1\21\7\22\2\0"+
    "\2\22\2\0\3\22\11\0\1\22\4\0\2\21\1\0\3\21\2\22"+
    "\2\0\12\22\4\21\15\0\3\22\1\0\6\21\4\0\2\21\2\0"+
    "\26\21\1\0\7\21\1\0\2\21\1\0\2\21\1\0\2\21\2\0"+
    "\1\22\1\0\5\22\4\0\2\22\2\0\3\22\13\0\4\21\1\0"+
    "\1\21\7\0\14\22\3\21\14\0\3\22\1\0\11\21\1\0\3\21"+
    "\1\0\26\21\1\0\7\21\1\0\2\21\1\0\5\21\2\0\1\22"+
    "\1\21\10\22\1\0\3\22\1\0\3\22\2\0\1\21\17\0\2\21"+
    "\2\22\2\0\12\22\1\0\1\21\17\0\3\22\1\0\10\21\2\0"+
    "\2\21\2\0\26\21\1\0\7\21\1\0\2\21\1\0\5\21\2\0"+
    "\1\22\1\21\6\22\3\0\2\22\2\0\3\22\10\0\2\22\4\0"+
    "\2\21\1\0\3\21\4\0\12\22\1\0\1\21\20\0\1\22\1\21"+
    "\1\0\6\21\3\0\3\21\1\0\4\21\3\0\2\21\1\0\1\21"+
    "\1\0\2\21\3\0\2\21\3\0\3\21\3\0\10\21\1\0\3\21"+
    "\4\0\5\22\3\0\3\22\1\0\4\22\11\0\1\22\17\0\11\22"+
    "\11\0\1\21\7\0\3\22\1\0\10\21\1\0\3\21\1\0\27\21"+
    "\1\0\12\21\1\0\5\21\4\0\7\22\1\0\3\22\1\0\4\22"+
    "\7\0\2\22\11\0\2\21\4\0\12\22\22\0\2\22\1\0\10\21"+
    "\1\0\3\21\1\0\27\21\1\0\12\21\1\0\5\21\2\0\1\22"+
    "\1\21\7\22\1\0\3\22\1\0\4\22\7\0\2\22\7\0\1\21"+
    "\1\0\2\21\4\0\12\22\22\0\2\22\1\0\10\21\1\0\3\21"+
    "\1\0\27\21\1\0\20\21\4\0\6\22\2\0\3\22\1\0\4\22"+
    "\11\0\1\22\10\0\2\21\4\0\12\22\22\0\2\22\1\0\22\21"+
    "\3\0\30\21\1\0\11\21\1\0\1\21\2\0\7\21\3\0\1\22"+
    "\4\0\6\22\1\0\1\22\1\0\10\22\22\0\2\22\15\0\60\21"+
    "\1\22\2\21\7\22\4\0\10\21\10\22\1\0\12\22\47\0\2\21"+
    "\1\0\1\21\2\0\2\21\1\0\1\21\2\0\1\21\6\0\4\21"+
    "\1\0\7\21\1\0\3\21\1\0\1\21\1\0\1\21\2\0\2\21"+
    "\1\0\4\21\1\22\2\21\6\22\1\0\2\22\1\21\2\0\5\21"+
    "\1\0\1\21\1\0\6\22\2\0\12\22\2\0\2\21\42\0\1\21"+
    "\27\0\2\22\6\0\12\22\13\0\1\22\1\0\1\22\1\0\1\22"+
    "\4\0\2\22\10\21\1\0\42\21\6\0\24\22\1\0\2\22\4\21"+
    "\4\0\10\22\1\0\44\22\11\0\1\22\71\0\42\21\1\0\5\21"+
    "\1\0\2\21\1\0\7\22\3\0\4\22\6\0\12\22\6\0\6\21"+
    "\4\22\106\0\46\21\12\0\51\21\7\0\132\21\5\0\104\21\5\0"+
    "\122\21\6\0\7\21\1\0\77\21\1\0\1\21\1\0\4\21\2\0"+
    "\7\21\1\0\1\21\1\0\4\21\2\0\47\21\1\0\1\21\1\0"+
    "\4\21\2\0\37\21\1\0\1\21\1\0\4\21\2\0\7\21\1\0"+
    "\1\21\1\0\4\21\2\0\7\21\1\0\7\21\1\0\27\21\1\0"+
    "\37\21\1\0\1\21\1\0\4\21\2\0\7\21\1\0\47\21\1\0"+
    "\23\21\16\0\11\22\56\0\125\21\14\0\u026c\21\2\0\10\21\12\0"+
    "\32\21\5\0\113\21\3\0\3\21\17\0\15\21\1\0\4\21\3\22"+
    "\13\0\22\21\3\22\13\0\22\21\2\22\14\0\15\21\1\0\3\21"+
    "\1\0\2\22\14\0\64\21\40\22\3\0\1\21\3\0\2\21\1\22"+
    "\2\0\12\22\41\0\3\22\2\0\12\22\6\0\130\21\10\0\51\21"+
    "\1\22\126\0\35\21\3\0\14\22\4\0\14\22\12\0\12\22\36\21"+
    "\2\0\5\21\u038b\0\154\21\224\0\234\21\4\0\132\21\6\0\26\21"+
    "\2\0\6\21\2\0\46\21\2\0\6\21\2\0\10\21\1\0\1\21"+
    "\1\0\1\21\1\0\1\21\1\0\37\21\2\0\65\21\1\0\7\21"+
    "\1\0\1\21\3\0\3\21\1\0\7\21\3\0\4\21\2\0\6\21"+
    "\4\0\15\21\5\0\3\21\1\0\7\21\17\0\4\22\32\0\5\22"+
    "\20\0\2\21\23\0\1\21\13\0\4\22\6\0\6\22\1\0\1\21"+
    "\15\0\1\21\40\0\22\21\36\0\15\22\4\0\1\22\3\0\6\22"+
    "\27\0\1\21\4\0\1\21\2\0\12\21\1\0\1\21\3\0\5\21"+
    "\6\0\1\21\1\0\1\21\1\0\1\21\1\0\4\21\1\0\3\21"+
    "\1\0\7\21\3\0\3\21\5\0\5\21\26\0\44\21\u0e81\0\3\21"+
    "\31\0\11\21\6\22\1\0\5\21\2\0\5\21\4\0\126\21\2\0"+
    "\2\22\2\0\3\21\1\0\137\21\5\0\50\21\4\0\136\21\21\0"+
    "\30\21\70\0\20\21\u0200\0\u19b6\21\112\0\u51a6\21\132\0\u048d\21\u0773\0"+
    "\u2ba4\21\u215c\0\u012e\21\2\0\73\21\225\0\7\21\14\0\5\21\5\0"+
    "\1\21\1\22\12\21\1\0\15\21\1\0\5\21\1\0\1\21\1\0"+
    "\2\21\1\0\2\21\1\0\154\21\41\0\u016b\21\22\0\100\21\2\0"+
    "\66\21\50\0\15\21\3\0\20\22\20\0\4\22\17\0\2\21\30\0"+
    "\3\21\31\0\1\21\6\0\5\21\1\0\207\21\2\0\1\22\4\0"+
    "\1\21\13\0\12\22\7\0\32\21\4\0\1\21\1\0\32\21\12\0"+
    "\132\21\3\0\6\21\2\0\6\21\2\0\6\21\2\0\3\21\3\0"+
    "\2\21\3\0\2\21\22\0\3\22\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\2\2\3\1\5"+
    "\1\3\1\6\2\3\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\14\3\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\1\1\3\1\34\2\35\1\36\1\35\1\3"+
    "\1\37\1\0\2\2\1\3\1\40\2\3\1\41\1\42"+
    "\12\3\2\7\1\43\1\44\1\45\2\14\1\46\11\3"+
    "\1\47\10\3\1\50\6\3\1\51\1\52\1\3\1\53"+
    "\2\3\1\54\1\55\1\56\1\57\1\3\1\35\1\60"+
    "\2\3\1\61\20\3\1\44\1\62\1\63\1\64\10\3"+
    "\1\65\16\3\1\66\1\3\1\67\1\3\1\70\3\3"+
    "\1\71\1\72\1\73\5\3\1\74\3\3\1\75\3\3"+
    "\1\76\1\3\1\0\6\3\1\77\2\3\1\100\2\3"+
    "\1\101\14\3\1\102\1\3\1\103\1\104\1\3\1\105"+
    "\1\3\1\106\1\107\10\3\1\44\1\3\1\110\1\111"+
    "\1\112\3\3\1\113\1\114\2\3\1\115\1\3\1\116"+
    "\1\117\1\120\1\121\5\3\1\122\3\3\1\123\1\3"+
    "\1\124\2\3\1\125\1\3\1\126\4\3\1\127\7\3"+
    "\1\130\1\131\1\132\1\133\3\3\1\134\5\3\1\135"+
    "\3\3\1\136\1\137\1\3\1\140\1\141\1\3\1\142"+
    "\3\3\1\143\1\144\1\145\1\146\1\147\1\3\1\150";

  private static int [] zzUnpackAction() {
    int [] result = new int[316];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\253\0\344\0\u011d\0\u0156\0\u018f"+
    "\0\u01c8\0\u0201\0\71\0\u023a\0\u0273\0\u02ac\0\u02e5\0\u031e"+
    "\0\71\0\u0357\0\u0390\0\u03c9\0\u0402\0\u043b\0\u0474\0\u04ad"+
    "\0\u04e6\0\u051f\0\u0558\0\u0591\0\u05ca\0\u0603\0\u063c\0\u0675"+
    "\0\71\0\71\0\71\0\71\0\71\0\71\0\71\0\71"+
    "\0\71\0\71\0\71\0\71\0\u06ae\0\u06e7\0\u0720\0\u0759"+
    "\0\71\0\u0792\0\u07cb\0\71\0\71\0\u0804\0\u083d\0\u0876"+
    "\0\u08af\0\u08e8\0\u0921\0\u095a\0\u0993\0\u09cc\0\71\0\u0156"+
    "\0\u0a05\0\u0a3e\0\u0a77\0\u0ab0\0\u0ae9\0\u0b22\0\u0b5b\0\u0b94"+
    "\0\u0bcd\0\u0c06\0\71\0\u0c3f\0\71\0\u0c78\0\u0cb1\0\u0cea"+
    "\0\71\0\u0d23\0\u0d5c\0\u0d95\0\u0dce\0\u0e07\0\u0e40\0\u0e79"+
    "\0\u0eb2\0\u0eeb\0\u0f24\0\u0f5d\0\u0f96\0\u0fcf\0\u1008\0\u1041"+
    "\0\u107a\0\u10b3\0\u10ec\0\u1125\0\u115e\0\u1197\0\u11d0\0\u1209"+
    "\0\u1242\0\u127b\0\u12b4\0\u0156\0\u0156\0\u12ed\0\u0156\0\u1326"+
    "\0\u135f\0\71\0\71\0\71\0\71\0\u1398\0\u13d1\0\u0156"+
    "\0\u140a\0\u1443\0\u0156\0\u147c\0\u14b5\0\u14ee\0\u1527\0\u1560"+
    "\0\u1599\0\u15d2\0\u160b\0\u1644\0\u167d\0\u16b6\0\u16ef\0\u1728"+
    "\0\u1761\0\u179a\0\u17d3\0\u180c\0\u0156\0\u0156\0\u0156\0\u1845"+
    "\0\u187e\0\u18b7\0\u18f0\0\u1929\0\u1962\0\u199b\0\u19d4\0\u0156"+
    "\0\u1a0d\0\u1a46\0\u1a7f\0\u1ab8\0\u1af1\0\u1b2a\0\u1b63\0\u1b9c"+
    "\0\u1bd5\0\u1c0e\0\u1c47\0\u1c80\0\u1cb9\0\u1cf2\0\u1d2b\0\u1d64"+
    "\0\u1d9d\0\u1dd6\0\u0156\0\u1e0f\0\u1e48\0\u1e81\0\u0156\0\u0156"+
    "\0\u0156\0\u1eba\0\u1ef3\0\u1f2c\0\u1f65\0\u1f9e\0\u0156\0\u1fd7"+
    "\0\u2010\0\u2049\0\u0156\0\u2082\0\u20bb\0\u20f4\0\u0156\0\u212d"+
    "\0\u2166\0\u219f\0\u21d8\0\u2211\0\u224a\0\u2283\0\u22bc\0\u0156"+
    "\0\u22f5\0\u232e\0\u0156\0\u2367\0\u23a0\0\u0156\0\u23d9\0\u2412"+
    "\0\u244b\0\u2484\0\u24bd\0\u24f6\0\u252f\0\u2568\0\u25a1\0\u25da"+
    "\0\u2613\0\u264c\0\u0156\0\u2685\0\u0156\0\u0156\0\u26be\0\u0156"+
    "\0\u26f7\0\u0156\0\u0156\0\u2730\0\u2769\0\u27a2\0\u27db\0\u2814"+
    "\0\u284d\0\u2886\0\u28bf\0\71\0\u28f8\0\u0156\0\u0156\0\u0156"+
    "\0\u2931\0\u296a\0\u29a3\0\u0156\0\u0156\0\u29dc\0\u2a15\0\u0156"+
    "\0\u2a4e\0\u0156\0\u0156\0\u0156\0\u0156\0\u2a87\0\u2ac0\0\u2af9"+
    "\0\u2b32\0\u2b6b\0\u0156\0\u2ba4\0\u2bdd\0\u2c16\0\u0156\0\u2c4f"+
    "\0\u0156\0\u2c88\0\u2cc1\0\u0156\0\u2cfa\0\u0156\0\u2d33\0\u2d6c"+
    "\0\u2da5\0\u2dde\0\u0156\0\u2e17\0\u2e50\0\u2e89\0\u2ec2\0\u2efb"+
    "\0\u2f34\0\u2f6d\0\u0156\0\u0156\0\u0156\0\u0156\0\u2fa6\0\u2fdf"+
    "\0\u3018\0\u0156\0\u3051\0\u308a\0\u30c3\0\u30fc\0\u3135\0\u0156"+
    "\0\u316e\0\u31a7\0\u31e0\0\u0156\0\u0156\0\u3219\0\u0156\0\u0156"+
    "\0\u3252\0\u0156\0\u328b\0\u32c4\0\u32fd\0\u0156\0\u0156\0\u0156"+
    "\0\u0156\0\u0156\0\u3336\0\u0156";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[316];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\2\1\5\1\17"+
    "\1\7\1\2\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\7\1\30\1\31\1\7\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\2\7\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\7\1\60\72\0"+
    "\2\3\2\0\1\3\1\0\1\61\1\62\1\63\1\0"+
    "\1\64\1\65\55\0\3\7\1\0\3\7\1\0\1\7"+
    "\1\0\2\7\4\0\2\7\4\0\1\66\3\7\1\67"+
    "\13\7\20\0\2\7\4\0\1\5\12\0\1\5\52\0"+
    "\1\70\1\71\2\0\1\71\1\72\1\61\1\62\1\63"+
    "\1\0\1\64\1\65\55\0\3\7\1\0\3\7\1\0"+
    "\1\7\1\0\2\7\4\0\2\7\4\0\20\7\20\0"+
    "\2\7\1\0\3\7\1\0\3\7\1\0\1\73\1\0"+
    "\2\7\4\0\2\7\4\0\5\7\1\74\2\7\1\75"+
    "\3\7\1\76\3\7\20\0\2\7\1\0\2\62\2\0"+
    "\1\62\2\0\1\77\61\0\3\7\1\0\3\7\1\0"+
    "\1\7\1\0\2\7\4\0\2\7\4\0\20\7\20\0"+
    "\1\100\1\7\1\0\3\7\1\0\2\7\1\101\1\0"+
    "\1\7\1\0\2\7\4\0\2\7\4\0\1\102\7\7"+
    "\1\103\1\104\2\7\1\105\3\7\20\0\2\7\1\0"+
    "\3\7\1\0\3\7\1\0\1\106\1\0\2\7\4\0"+
    "\2\7\4\0\1\107\7\7\1\110\1\111\2\7\1\112"+
    "\3\7\20\0\2\7\15\16\1\113\1\114\1\0\51\16"+
    "\20\0\1\115\74\0\1\116\71\0\1\117\43\0\16\23"+
    "\1\120\1\0\6\23\1\121\42\23\1\0\3\7\1\0"+
    "\3\7\1\0\1\7\1\0\2\7\4\0\2\7\4\0"+
    "\1\7\1\122\13\7\1\123\2\7\20\0\2\7\1\0"+
    "\3\7\1\0\3\7\1\0\1\124\1\0\2\7\4\0"+
    "\2\7\4\0\5\7\1\125\4\7\1\126\5\7\20\0"+
    "\2\7\1\0\3\7\1\0\3\7\1\0\1\7\1\0"+
    "\2\7\4\0\2\7\4\0\6\7\1\127\1\130\1\131"+
    "\1\132\6\7\20\0\2\7\1\0\3\7\1\0\3\7"+
    "\1\0\1\133\1\0\2\7\4\0\2\7\4\0\5\7"+
    "\1\134\1\135\11\7\20\0\2\7\1\0\3\7\1\0"+
    "\3\7\1\0\1\7\1\0\2\7\4\0\2\7\4\0"+
    "\6\7\1\136\2\7\1\137\6\7\20\0\2\7\1\0"+
    "\3\7\1\0\3\7\1\0\1\140\1\0\2\7\4\0"+
    "\2\7\4\0\1\141\7\7\1\142\3\7\1\143\3\7"+
    "\20\0\2\7\1\0\3\7\1\0\3\7\1\0\1\7"+
    "\1\0\2\7\4\0\2\7\4\0\5\7\1\144\1\145"+
    "\2\7\1\146\6\7\20\0\2\7\1\0\3\7\1\0"+
    "\3\7\1\0\1\7\1\0\2\7\4\0\2\7\4\0"+
    "\1\7\1\147\13\7\1\150\2\7\20\0\2\7\1\0"+
    "\3\7\1\0\3\7\1\0\1\7\1\0\2\7\4\0"+
    "\2\7\4\0\1\151\17\7\20\0\2\7\1\0\3\7"+
    "\1\0\3\7\1\0\1\7\1\0\2\7\4\0\2\7"+
    "\4\0\1\152\17\7\20\0\2\7\1\0\3\7\1\0"+
    "\2\7\1\153\1\0\1\7\1\0\1\154\1\7\4\0"+
    "\2\7\4\0\1\7\1\155\13\7\1\156\2\7\20\0"+
    "\2\7\1\0\3\7\1\0\3\7\1\0\1\157\1\0"+
    "\2\7\4\0\2\7\4\0\10\7\1\160\1\161\6\7"+
    "\20\0\2\7\47\0\1\162\70\0\1\163\70\0\1\164"+
    "\70\0\1\165\22\0\3\7\1\0\3\7\1\0\1\7"+
    "\1\0\2\7\4\0\2\7\4\0\10\7\1\166\7\7"+
    "\20\0\2\7\1\0\2\62\2\0\1\62\3\0\1\63"+
    "\1\0\1\64\1\65\55\0\2\167\2\0\1\167\4\0"+
    "\1\167\1\64\1\65\10\0\1\167\44\0\3\7\1\0"+
    "\3\7\1\0\1\7\1\0\2\7\4\0\2\7\4\0"+
    "\3\7\1\170\14\7\20\0\2\7\1\0\3\7\1\0"+
    "\3\7\1\0\1\7\1\0\2\7\4\0\2\7\4\0"+
    "\5\7\1\171\12\7\20\0\2\7\1\0\2\70\2\0"+
    "\1\70\2\0\1\62\1\63\1\0\1\64\1\65\55\0"+
    "\1\70\1\71\2\0\1\71\1\0\1\61\1\62\1\63"+
    "\1\0\1\64\1\65\55\0\3\72\1\0\1\72\1\0"+
    "\1\61\1\0\1\72\1\0\2\72\12\0\1\72\1\0"+
    "\1\72\40\0\3\7\1\0\3\7\1\0\1\7\1\0"+
    "\1\172\1\7\4\0\2\7\4\0\20\7\20\0\2\7"+
    "\1\0\3\7\1\0\3\7\1\0\1\173\1\0\2\7"+
    "\4\0\2\7\4\0\20\7\20\0\2\7\1\0\3\7"+
    "\1\0\3\7\1\0\1\7\1\0\2\7\4\0\2\7"+
    "\4\0\1\174\14\7\1\175\2\7\20\0\2\7\1\0"+
    "\3\7\1\0\3\7\1\0\1\7\1\0\2\7\4\0"+
    "\2\7\4\0\13\7\1\176\4\7\20\0\2\7\1\0"+
    "\3\7\1\0\3\7\1\0\1\7\1\0\2\7\4\0"+
    "\2\7\4\0\1\177\7\7\1\200\7\7\20\0\2\7"+
    "\1\0\3\7\1\0\2\7\1\201\1\0\1\7\1\0"+
    "\2\7\4\0\2\7\4\0\20\7\20\0\2\7\1\0"+
    "\3\7\1\0\3\7\1\0\1\7\1\0\2\7\4\0"+
    "\2\7\4\0\6\7\1\202\11\7\20\0\2\7\1\0"+
    "\3\7\1\0\2\7\1\203\1\0\1\7\1\0\2\7"+
    "\4\0\2\7\4\0\20\7\20\0\2\7\1\0\3\7"+
    "\1\0\2\7\1\204\1\0\1\7\1\0\2\7\4\0"+
    "\2\7\4\0\20\7\20\0\2\7\1\0\3\7\1\0"+
    "\3\7\1\0\1\7\1\0\1\205\1\7\4\0\2\7"+
    "\4\0\1\7\1\206\1\207\15\7\20\0\2\7\1\0"+
    "\3\7\1\0\3\7\1\0\1\7\1\0\2\7\4\0"+
    "\2\7\4\0\5\7\1\210\12\7\20\0\2\7\1\0"+
    "\3\7\1\0\3\7\1\0\1\7\1\0\2\7\4\0"+
    "\2\7\4\0\11\7\1\211\6\7\20\0\2\7\1\0"+
    "\3\7\1\0\3\7\1\0\1\7\1\0\2\7\4\0"+
    "\2\7\4\0\13\7\1\212\4\7\20\0\2\7\1\0"+
    "\3\7\1\0\3\7\1\0\1\7\1\0\2\7\4\0"+
    "\2\7\4\0\1\7\1\213\16\7\20\0\2\7\17\16"+
    "\1\0\51\16\24\214\1\0\44\214\17\117\1\0\51\117"+
    "\17\23\1\0\51\23\1\0\3\7\1\0\3\7\1\0"+
    "\1\7\1\0\2\7\4\0\2\7\4\0\2\7\1\215"+
    "\15\7\20\0\2\7\1\0\3\7\1\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\216\4\0\2\7\4\0\20\7"+
    "\20\0\2\7\1\0\3\7\1\0\3\7\1\0\1\7"+
    "\1\0\2\7\4\0\2\7\4\0\5\7\1\217\12\7"+
    "\20\0\2\7\1\0\3\7\1\0\3\7\1\0\1\7"+
    "\1\0\2\7\4\0\2\7\4\0\6\7\1\220\1\7"+
    "\1\221\7\7\20\0\2\7\1\0\3\7\1\0\2\7"+
    "\1\222\1\0\1\7\1\0\2\7\4\0\2\7\4\0"+
    "\20\7\20\0\2\7\1\0\3\7\1\0\3\7\1\0"+
    "\1\7\1\0\2\7\4\0\2\7\4\0\10\7\1\223"+
    "\7\7\20\0\2\7\1\0\3\7\1\0\3\7\1\0"+
    "\1\7\1\0\2\7\4\0\2\7\4\0\1\224\17\7"+
    "\20\0\2\7\1\0\3\7\1\0\3\7\1\0\1\7"+
    "\1\0\2\7\4\0\2\7\4\0\3\7\1\225\14\7"+
    "\20\0\2\7\1\0\2\7\1\226\1\0\3\7\1\0"+
    "\1\7\1\0\2\7\4\0\2\7\4\0\20\7\20\0"+
    "\2\7\1\0\3\7\1\0\3\7\1\0\1\7\1\0"+
    "\2\7\4\0\2\7\4\0\15\7\1\227\2\7\20\0"+
    "\2\7\1\0\3\7\1\0\3\7\1\0\1\230\1\0"+
    "\2\7\4\0\2\7\4\0\20\7\20\0\2\7\1\0"+
    "\3\7\1\0\3\7\1\0\1\7\1\0\2\7\4\0"+
    "\2\7\4\0\10\7\1\231\7\7\20\0\2\7\1\0"+
    "\3\7\1\0\3\7\1\0\1\7\1\0\2\7\4\0"+
    "\2\7\4\0\11\7\1\232\6\7\20\0\2\7\1\0"+
    "\3\7\1\0\3\7\1\0\1\7\1\0\2\7\4\0"+
    "\2\7\4\0\12\7\1\233\5\7\20\0\2\7\1\0"+
    "\3\7\1\0\3\7\1\0\1\7\1\0\2\7\4\0"+
    "\2\7\4\0\3\7\1\234\14\7\20\0\2\7\1\0"+
    "\3\7\1\0\3\7\1\0\1\7\1\0\2\7\4\0"+
    "\2\7\4\0\15\7\1\235\2\7\20\0\2\7\1\0"+
    "\3\7\1\0\2\7\1\236\1\0\1\7\1\0\2\7"+
    "\4\0\2\7\4\0\20\7\20\0\2\7\1\0\3\7"+
    "\1\0\3\7\1\0\1\7\1\0\2\7\4\0\2\7"+
    "\4\0\3\7\1\237\14\7\20\0\2\7\1\0\3\7"+
    "\1\0\3\7\1\0\1\7\1\0\2\7\4\0\2\7"+
    "\4\0\7\7\1\240\10\7\20\0\2\7\1\0\3\7"+
    "\1\0\3\7\1\0\1\7\1\0\1\7\1\241\4\0"+
    "\2\7\4\0\20\7\20\0\2\7\1\0\3\7\1\0"+
    "\3\7\1\0\1\7\1\0\2\7\4\0\2\7\4\0"+
    "\5\7\1\242\12\7\20\0\2\7\1\0\3\7\1\0"+
    "\3\7\1\0\1\7\1\0\2\7\4\0\2\7\4\0"+
    "\14\7\1\243\3\7\20\0\2\7\1\0\3\7\1\0"+
    "\3\7\1\0\1\7\1\0\2\7\4\0\2\7\4\0"+
    "\14\7\1\244\3\7\20\0\2\7\1\0\3\7\1\0"+
    "\3\7\1\0\1\7\1\0\2\7\4\0\2\7\4\0"+
    "\6\7\1\245\11\7\20\0\2\7\1\0\3\7\1\0"+
    "\3\7\1\0\1\7\1\0\2\7\4\0\2\7\4\0"+
    "\5\7\1\246\4\7\1\247\5\7\20\0\2\7\1\0"+
    "\3\7\1\0\2\7\1\250\1\0\1\7\1\0\2\7"+
    "\4\0\2\7\4\0\20\7\20\0\2\7\1\0\3\7"+
    "\1\0\3\7\1\0\1\7\1\0\2\7\4\0\2\7"+
    "\4\0\5\7\1\251\7\7\1\252\2\7\20\0\2\7"+
    "\1\0\3\7\1\0\3\7\1\0\1\7\1\0\2\7"+
    "\4\0\2\7\4\0\5\7\1\253\12\7\20\0\2\7"+
    "\1\0\3\7\1\0\2\7\1\254\1\0\1\7\1\0"+
    "\2\7\4\0\2\7\4\0\20\7\20\0\2\7\1\0"+
    "\3\7\1\0\3\7\1\0\1\7\1\0\2\7\4\0"+
    "\2\7\4\0\14\7\1\255\3\7\20\0\2\7\1\0"+
    "\2\167\2\0\1\167\5\0\1\64\1\65\55\0\3\7"+
    "\1\0\3\7\1\0\1\256\1\0\2\7\4\0\2\7"+
    "\4\0\20\7\20\0\2\7\1\0\3\7\1\0\3\7"+
    "\1\0\1\7\1\0\2\7\4\0\2\7\4\0\5\7"+
    "\1\257\12\7\20\0\2\7\1\0\3\7\1\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\260\4\0\2\7\4\0"+
    "\20\7\20\0\2\7\1\0\3\7\1\0\3\7\1\0"+
    "\1\7\1\0\2\7\4\0\2\7\4\0\3\7\1\261"+
    "\14\7\20\0\2\7\1\0\3\7\1\0\3\7\1\0"+
    "\1\7\1\0\2\7\4\0\2\7\4\0\14\7\1\262"+
    "\3\7\20\0\2\7\1\0\3\7\1\0\3\7\1\0"+
    "\1\7\1\0\2\7\4\0\2\7\4\0\5\7\1\263"+
    "\12\7\20\0\2\7\1\0\3\7\1\0\3\7\1\0"+
    "\1\7\1\0\2\7\4\0\2\7\4\0\1\264\17\7"+
    "\20\0\2\7\1\0\3\7\1\0\3\7\1\0\1\7"+
    "\1\0\2\7\4\0\2\7\4\0\1\7\1\265\16\7"+
    "\20\0\2\7\1\0\3\7\1\0\3\7\1\0\1\266"+
    "\1\0\2\7\4\0\2\7\4\0\20\7\20\0\2\7"+
    "\1\0\3\7\1\0\2\7\1\267\1\0\1\7\1\0"+
    "\2\7\4\0\2\7\4\0\20\7\20\0\2\7\1\0"+
    "\3\7\1\0\3\7\1\0\1\7\1\0\2\7\4\0"+
    "\2\7\4\0\5\7\1\270\12\7\20\0\2\7\1\0"+
    "\3\7\1\0\3\7\1\0\1\7\1\0\2\7\4\0"+
    "\2\7\4\0\1\271\13\7\1\272\3\7\20\0\2\7"+
    "\1\0\3\7\1\0\3\7\1\0\1\7\1\0\2\7"+
    "\4\0\2\7\4\0\2\7\1\273\15\7\20\0\2\7"+
    "\1\0\3\7\1\0\2\7\1\274\1\0\1\7\1\0"+
    "\2\7\4\0\2\7\4\0\20\7\20\0\2\7\1\0"+
    "\3\7\1\0\3\7\1\0\1\275\1\0\2\7\4\0"+
    "\2\7\4\0\20\7\20\0\2\7\1\0\2\7\1\276"+
    "\1\0\3\7\1\0\1\7\1\0\2\7\4\0\2\7"+
    "\4\0\20\7\20\0\2\7\1\0\3\7\1\0\3\7"+
    "\1\0\1\7\1\0\2\7\4\0\2\7\4\0\12\7"+
    "\1\277\5\7\20\0\2\7\1\0\3\7\1\0\3\7"+
    "\1\0\1\7\1\0\2\7\4\0\2\7\4\0\5\7"+
    "\1\300\12\7\20\0\2\7\24\214\1\301\44\214\1\0"+
    "\3\7\1\0\3\7\1\0\1\302\1\0\2\7\4\0"+
    "\2\7\4\0\20\7\20\0\2\7\1\0\3\7\1\0"+
    "\3\7\1\0\1\7\1\0\2\7\4\0\2\7\4\0"+
    "\6\7\1\303\11\7\20\0\2\7\1\0\3\7\1\0"+
    "\3\7\1\0\1\7\1\0\2\7\4\0\2\7\4\0"+
    "\14\7\1\304\3\7\20\0\2\7\1\0\3\7\1\0"+
    "\3\7\1\0\1\7\1\0\2\7\4\0\2\7\4\0"+
    "\1\7\1\305\16\7\20\0\2\7\1\0\3\7\1\0"+
    "\3\7\1\0\1\7\1\0\2\7\4\0\2\7\4\0"+
    "\6\7\1\306\11\7\20\0\2\7\1\0\3\7\1\0"+
    "\3\7\1\0\1\7\1\0\2\7\4\0\2\7\4\0"+
    "\6\7\1\307\11\7\20\0\2\7\1\0\3\7\1\0"+
    "\3\7\1\0\1\310\1\0\2\7\4\0\2\7\4\0"+
    "\20\7\20\0\2\7\1\0\3\7\1\0\3\7\1\0"+
    "\1\311\1\0\2\7\4\0\2\7\4\0\20\7\20\0"+
    "\2\7\1\0\3\7\1\0\3\7\1\0\1\7\1\0"+
    "\2\7\4\0\2\7\4\0\11\7\1\312\6\7\20\0"+
    "\2\7\1\0\3\7\1\0\3\7\1\0\1\313\1\0"+
    "\2\7\4\0\2\7\4\0\20\7\20\0\2\7\1\0"+
    "\3\7\1\0\2\7\1\314\1\0\1\7\1\0\2\7"+
    "\4\0\2\7\4\0\20\7\20\0\2\7\1\0\3\7"+
    "\1\0\3\7\1\0\1\7\1\0\2\7\4\0\2\7"+
    "\4\0\14\7\1\315\3\7\20\0\2\7\1\0\3\7"+
    "\1\0\3\7\1\0\1\7\1\0\2\7\4\0\2\7"+
    "\4\0\17\7\1\316\20\0\2\7\1\0\3\7\1\0"+
    "\2\7\1\317\1\0\1\7\1\0\2\7\4\0\2\7"+
    "\4\0\20\7\20\0\2\7\1\0\3\7\1\0\3\7"+
    "\1\0\1\7\1\0\2\7\4\0\2\7\4\0\7\7"+
    "\1\320\10\7\20\0\2\7\1\0\3\7\1\0\3\7"+
    "\1\0\1\321\1\0\2\7\4\0\2\7\4\0\20\7"+
    "\20\0\2\7\1\0\3\7\1\0\3\7\1\0\1\322"+
    "\1\0\2\7\4\0\2\7\4\0\20\7\20\0\2\7"+
    "\1\0\3\7\1\0\3\7\1\0\1\323\1\0\2\7"+
    "\4\0\2\7\4\0\20\7\20\0\2\7\1\0\3\7"+
    "\1\0\3\7\1\0\1\7\1\0\2\7\4\0\2\7"+
    "\4\0\15\7\1\324\2\7\20\0\2\7\1\0\3\7"+
    "\1\0\3\7\1\0\1\7\1\0\2\7\4\0\2\7"+
    "\4\0\10\7\1\325\7\7\20\0\2\7\1\0\3\7"+
    "\1\0\3\7\1\0\1\7\1\0\2\7\4\0\2\7"+
    "\4\0\1\326\4\7\1\327\12\7\20\0\2\7\1\0"+
    "\3\7\1\0\3\7\1\0\1\7\1\0\2\7\4\0"+
    "\2\7\4\0\2\7\1\330\15\7\20\0\2\7\1\0"+
    "\3\7\1\0\3\7\1\0\1\7\1\0\2\7\4\0"+
    "\2\7\4\0\6\7\1\331\11\7\20\0\2\7\1\0"+
    "\3\7\1\0\3\7\1\0\1\7\1\0\2\7\4\0"+
    "\2\7\4\0\11\7\1\332\6\7\20\0\2\7\1\0"+
    "\3\7\1\0\3\7\1\0\1\7\1\0\2\7\4\0"+
    "\2\7\4\0\10\7\1\333\7\7\20\0\2\7\1\0"+
    "\3\7\1\0\3\7\1\0\1\334\1\0\2\7\4\0"+
    "\2\7\4\0\20\7\20\0\2\7\1\0\3\7\1\0"+
    "\2\7\1\335\1\0\1\7\1\0\2\7\4\0\2\7"+
    "\4\0\20\7\20\0\2\7\1\0\3\7\1\0\3\7"+
    "\1\0\1\7\1\0\2\7\4\0\2\7\4\0\15\7"+
    "\1\336\2\7\20\0\2\7\1\0\3\7\1\0\3\7"+
    "\1\0\1\7\1\0\2\7\4\0\2\7\4\0\1\337"+
    "\17\7\20\0\2\7\1\0\3\7\1\0\3\7\1\0"+
    "\1\7\1\0\2\7\4\0\2\7\4\0\5\7\1\340"+
    "\12\7\20\0\2\7\1\0\3\7\1\0\3\7\1\0"+
    "\1\7\1\0\2\7\4\0\2\7\4\0\5\7\1\341"+
    "\12\7\20\0\2\7\1\0\3\7\1\0\3\7\1\0"+
    "\1\7\1\0\2\7\4\0\2\7\4\0\5\7\1\342"+
    "\12\7\20\0\2\7\1\0\3\7\1\0\3\7\1\0"+
    "\1\343\1\0\2\7\4\0\2\7\4\0\20\7\20\0"+
    "\2\7\1\0\3\7\1\0\3\7\1\0\1\7\1\0"+
    "\2\7\4\0\2\7\4\0\1\344\17\7\20\0\2\7"+
    "\1\0\3\7\1\0\3\7\1\0\1\345\1\0\2\7"+
    "\4\0\2\7\4\0\20\7\20\0\2\7\1\0\3\7"+
    "\1\0\3\7\1\0\1\7\1\0\2\7\4\0\2\7"+
    "\4\0\11\7\1\346\6\7\20\0\2\7\1\0\3\7"+
    "\1\0\3\7\1\0\1\7\1\0\2\7\4\0\2\7"+
    "\4\0\15\7\1\347\2\7\20\0\2\7\1\0\3\7"+
    "\1\0\3\7\1\0\1\7\1\0\2\7\4\0\2\7"+
    "\4\0\1\350\17\7\20\0\2\7\1\0\3\7\1\0"+
    "\3\7\1\0\1\7\1\0\2\7\4\0\2\7\4\0"+
    "\5\7\1\351\12\7\20\0\2\7\1\0\3\7\1\0"+
    "\2\7\1\352\1\0\1\7\1\0\2\7\4\0\2\7"+
    "\4\0\20\7\20\0\2\7\1\0\3\7\1\0\3\7"+
    "\1\0\1\7\1\0\2\7\4\0\2\7\4\0\14\7"+
    "\1\353\3\7\20\0\2\7\23\214\1\354\1\301\44\214"+
    "\1\0\3\7\1\0\3\7\1\0\1\7\1\0\2\7"+
    "\4\0\2\7\4\0\1\355\17\7\20\0\2\7\1\0"+
    "\3\7\1\0\3\7\1\0\1\356\1\0\2\7\4\0"+
    "\2\7\4\0\20\7\20\0\2\7\1\0\3\7\1\0"+
    "\3\7\1\0\1\7\1\0\2\7\4\0\2\7\4\0"+
    "\5\7\1\357\12\7\20\0\2\7\1\0\3\7\1\0"+
    "\3\7\1\0\1\7\1\0\2\7\4\0\2\7\4\0"+
    "\1\7\1\360\16\7\20\0\2\7\1\0\3\7\1\0"+
    "\3\7\1\0\1\7\1\0\2\7\4\0\2\7\4\0"+
    "\1\361\17\7\20\0\2\7\1\0\3\7\1\0\3\7"+
    "\1\0\1\7\1\0\2\7\4\0\2\7\4\0\10\7"+
    "\1\362\7\7\20\0\2\7\1\0\3\7\1\0\3\7"+
    "\1\0\1\7\1\0\2\7\4\0\2\7\4\0\6\7"+
    "\1\363\11\7\20\0\2\7\1\0\3\7\1\0\3\7"+
    "\1\0\1\7\1\0\2\7\4\0\2\7\4\0\12\7"+
    "\1\364\5\7\20\0\2\7\1\0\3\7\1\0\3\7"+
    "\1\0\1\365\1\0\2\7\4\0\2\7\4\0\20\7"+
    "\20\0\2\7\1\0\3\7\1\0\3\7\1\0\1\7"+
    "\1\0\2\7\4\0\2\7\4\0\1\7\1\366\16\7"+
    "\20\0\2\7\1\0\3\7\1\0\3\7\1\0\1\7"+
    "\1\0\2\7\4\0\2\7\4\0\11\7\1\367\6\7"+
    "\20\0\2\7\1\0\3\7\1\0\3\7\1\0\1\7"+
    "\1\0\2\7\4\0\2\7\4\0\5\7\1\370\12\7"+
    "\20\0\2\7\1\0\3\7\1\0\3\7\1\0\1\7"+
    "\1\0\2\7\4\0\2\7\4\0\6\7\1\371\11\7"+
    "\20\0\2\7\1\0\3\7\1\0\3\7\1\0\1\7"+
    "\1\0\2\7\4\0\2\7\4\0\6\7\1\372\11\7"+
    "\20\0\2\7\1\0\3\7\1\0\3\7\1\0\1\7"+
    "\1\0\2\7\4\0\2\7\4\0\6\7\1\373\11\7"+
    "\20\0\2\7\1\0\3\7\1\0\3\7\1\0\1\7"+
    "\1\0\2\7\4\0\2\7\4\0\3\7\1\374\14\7"+
    "\20\0\2\7\1\0\3\7\1\0\3\7\1\0\1\7"+
    "\1\0\2\7\4\0\2\7\4\0\15\7\1\375\2\7"+
    "\20\0\2\7\1\0\3\7\1\0\2\7\1\376\1\0"+
    "\1\7\1\0\2\7\4\0\2\7\4\0\20\7\20\0"+
    "\2\7\1\0\3\7\1\0\3\7\1\0\1\7\1\0"+
    "\2\7\4\0\2\7\4\0\14\7\1\377\3\7\20\0"+
    "\2\7\1\0\3\7\1\0\3\7\1\0\1\7\1\0"+
    "\2\7\4\0\2\7\4\0\7\7\1\u0100\10\7\20\0"+
    "\2\7\1\0\3\7\1\0\3\7\1\0\1\u0101\1\0"+
    "\2\7\4\0\2\7\4\0\20\7\20\0\2\7\1\0"+
    "\3\7\1\0\3\7\1\0\1\7\1\0\2\7\4\0"+
    "\2\7\4\0\1\7\1\u0102\16\7\20\0\2\7\1\0"+
    "\3\7\1\0\3\7\1\0\1\7\1\0\2\7\4\0"+
    "\2\7\4\0\6\7\1\u0103\11\7\20\0\2\7\1\0"+
    "\3\7\1\0\3\7\1\0\1\7\1\0\2\7\4\0"+
    "\2\7\4\0\6\7\1\u0104\11\7\20\0\2\7\1\0"+
    "\3\7\1\0\3\7\1\0\1\u0105\1\0\2\7\4\0"+
    "\2\7\4\0\20\7\20\0\2\7\1\0\3\7\1\0"+
    "\3\7\1\0\1\7\1\0\2\7\4\0\2\7\4\0"+
    "\2\7\1\u0106\15\7\20\0\2\7\1\0\3\7\1\0"+
    "\3\7\1\0\1\7\1\0\2\7\4\0\2\7\4\0"+
    "\6\7\1\u0107\11\7\20\0\2\7\1\0\3\7\1\0"+
    "\2\7\1\u0108\1\0\1\7\1\0\2\7\4\0\2\7"+
    "\4\0\20\7\20\0\2\7\1\0\3\7\1\0\3\7"+
    "\1\0\1\u0109\1\0\2\7\4\0\2\7\4\0\20\7"+
    "\20\0\2\7\1\0\3\7\1\0\3\7\1\0\1\7"+
    "\1\0\2\7\4\0\2\7\4\0\6\7\1\u010a\11\7"+
    "\20\0\2\7\1\0\3\7\1\0\3\7\1\0\1\7"+
    "\1\0\2\7\4\0\2\7\4\0\14\7\1\u010b\3\7"+
    "\20\0\2\7\1\0\3\7\1\0\3\7\1\0\1\u010c"+
    "\1\0\2\7\4\0\2\7\4\0\20\7\20\0\2\7"+
    "\1\0\3\7\1\0\3\7\1\0\1\7\1\0\2\7"+
    "\4\0\2\7\4\0\15\7\1\u010d\2\7\20\0\2\7"+
    "\1\0\3\7\1\0\3\7\1\0\1\7\1\0\2\7"+
    "\4\0\2\7\4\0\13\7\1\u010e\4\7\20\0\2\7"+
    "\1\0\3\7\1\0\3\7\1\0\1\7\1\0\2\7"+
    "\4\0\2\7\4\0\6\7\1\u010f\11\7\20\0\2\7"+
    "\1\0\3\7\1\0\3\7\1\0\1\7\1\0\2\7"+
    "\4\0\2\7\4\0\11\7\1\u0110\6\7\20\0\2\7"+
    "\1\0\3\7\1\0\3\7\1\0\1\7\1\0\2\7"+
    "\4\0\2\7\4\0\1\u0111\17\7\20\0\2\7\1\0"+
    "\3\7\1\0\3\7\1\0\1\7\1\0\2\7\4\0"+
    "\2\7\4\0\5\7\1\u0112\12\7\20\0\2\7\1\0"+
    "\3\7\1\0\3\7\1\0\1\7\1\0\2\7\4\0"+
    "\2\7\4\0\12\7\1\u0113\5\7\20\0\2\7\1\0"+
    "\3\7\1\0\3\7\1\0\1\7\1\0\2\7\4\0"+
    "\2\7\4\0\16\7\1\u0114\1\7\20\0\2\7\1\0"+
    "\3\7\1\0\2\7\1\u0115\1\0\1\7\1\0\2\7"+
    "\4\0\2\7\4\0\20\7\20\0\2\7\1\0\3\7"+
    "\1\0\3\7\1\0\1\7\1\0\2\7\4\0\2\7"+
    "\4\0\5\7\1\u0116\12\7\20\0\2\7\1\0\3\7"+
    "\1\0\3\7\1\0\1\u0117\1\0\2\7\4\0\2\7"+
    "\4\0\20\7\20\0\2\7\1\0\3\7\1\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\u0118\4\0\2\7\4\0"+
    "\20\7\20\0\2\7\1\0\3\7\1\0\3\7\1\0"+
    "\1\7\1\0\2\7\4\0\2\7\4\0\5\7\1\u0119"+
    "\12\7\20\0\2\7\1\0\3\7\1\0\3\7\1\0"+
    "\1\7\1\0\2\7\4\0\2\7\4\0\6\7\1\u011a"+
    "\11\7\20\0\2\7\1\0\3\7\1\0\3\7\1\0"+
    "\1\7\1\0\2\7\4\0\2\7\4\0\15\7\1\u011b"+
    "\2\7\20\0\2\7\1\0\3\7\1\0\3\7\1\0"+
    "\1\7\1\0\2\7\4\0\2\7\4\0\7\7\1\u011c"+
    "\10\7\20\0\2\7\1\0\3\7\1\0\3\7\1\0"+
    "\1\7\1\0\2\7\4\0\2\7\4\0\5\7\1\u011d"+
    "\12\7\20\0\2\7\1\0\3\7\1\0\3\7\1\0"+
    "\1\u011e\1\0\2\7\4\0\2\7\4\0\20\7\20\0"+
    "\2\7\1\0\3\7\1\0\3\7\1\0\1\7\1\0"+
    "\2\7\4\0\2\7\4\0\13\7\1\u011f\4\7\20\0"+
    "\2\7\1\0\3\7\1\0\3\7\1\0\1\7\1\0"+
    "\2\7\4\0\2\7\4\0\2\7\1\u0120\15\7\20\0"+
    "\2\7\1\0\3\7\1\0\3\7\1\0\1\7\1\0"+
    "\2\7\4\0\2\7\4\0\6\7\1\u0121\11\7\20\0"+
    "\2\7\1\0\3\7\1\0\3\7\1\0\1\7\1\0"+
    "\2\7\4\0\2\7\4\0\12\7\1\u0122\5\7\20\0"+
    "\2\7\1\0\3\7\1\0\3\7\1\0\1\7\1\0"+
    "\2\7\4\0\2\7\4\0\5\7\1\u0123\12\7\20\0"+
    "\2\7\1\0\3\7\1\0\3\7\1\0\1\u0124\1\0"+
    "\2\7\4\0\2\7\4\0\20\7\20\0\2\7\1\0"+
    "\3\7\1\0\3\7\1\0\1\7\1\0\2\7\4\0"+
    "\2\7\4\0\14\7\1\u0125\3\7\20\0\2\7\1\0"+
    "\3\7\1\0\3\7\1\0\1\u0126\1\0\2\7\4\0"+
    "\2\7\4\0\20\7\20\0\2\7\1\0\3\7\1\0"+
    "\3\7\1\0\1\7\1\0\2\7\4\0\2\7\4\0"+
    "\14\7\1\u0127\3\7\20\0\2\7\1\0\3\7\1\0"+
    "\3\7\1\0\1\7\1\0\2\7\4\0\2\7\4\0"+
    "\1\7\1\u0128\16\7\20\0\2\7\1\0\3\7\1\0"+
    "\3\7\1\0\1\7\1\0\2\7\4\0\2\7\4\0"+
    "\11\7\1\u0129\6\7\20\0\2\7\1\0\3\7\1\0"+
    "\3\7\1\0\1\7\1\0\2\7\4\0\2\7\4\0"+
    "\6\7\1\u012a\11\7\20\0\2\7\1\0\3\7\1\0"+
    "\3\7\1\0\1\7\1\0\2\7\4\0\2\7\4\0"+
    "\1\u012b\17\7\20\0\2\7\1\0\3\7\1\0\3\7"+
    "\1\0\1\u012c\1\0\2\7\4\0\2\7\4\0\20\7"+
    "\20\0\2\7\1\0\3\7\1\0\3\7\1\0\1\7"+
    "\1\0\2\7\4\0\2\7\4\0\5\7\1\u012d\12\7"+
    "\20\0\2\7\1\0\3\7\1\0\3\7\1\0\1\7"+
    "\1\0\2\7\4\0\2\7\4\0\1\u012e\17\7\20\0"+
    "\2\7\1\0\3\7\1\0\3\7\1\0\1\u012f\1\0"+
    "\2\7\4\0\2\7\4\0\20\7\20\0\2\7\1\0"+
    "\3\7\1\0\3\7\1\0\1\7\1\0\2\7\4\0"+
    "\2\7\4\0\6\7\1\u0130\11\7\20\0\2\7\1\0"+
    "\3\7\1\0\3\7\1\0\1\7\1\0\2\7\4\0"+
    "\2\7\4\0\1\7\1\u0131\16\7\20\0\2\7\1\0"+
    "\3\7\1\0\2\7\1\u0132\1\0\1\7\1\0\2\7"+
    "\4\0\2\7\4\0\20\7\20\0\2\7\1\0\3\7"+
    "\1\0\3\7\1\0\1\7\1\0\2\7\4\0\2\7"+
    "\4\0\10\7\1\u0133\7\7\20\0\2\7\1\0\3\7"+
    "\1\0\3\7\1\0\1\7\1\0\2\7\4\0\2\7"+
    "\4\0\2\7\1\u0134\15\7\20\0\2\7\1\0\3\7"+
    "\1\0\3\7\1\0\1\7\1\0\2\7\4\0\2\7"+
    "\4\0\1\u0135\17\7\20\0\2\7\1\0\3\7\1\0"+
    "\3\7\1\0\1\7\1\0\2\7\4\0\2\7\4\0"+
    "\4\7\1\u0136\13\7\20\0\2\7\1\0\3\7\1\0"+
    "\3\7\1\0\1\7\1\0\2\7\4\0\2\7\4\0"+
    "\4\7\1\u0137\13\7\20\0\2\7\1\0\3\7\1\0"+
    "\3\7\1\0\1\u0138\1\0\2\7\4\0\2\7\4\0"+
    "\20\7\20\0\2\7\1\0\3\7\1\0\3\7\1\0"+
    "\1\7\1\0\2\7\4\0\2\7\4\0\15\7\1\u0139"+
    "\2\7\20\0\2\7\1\0\3\7\1\0\3\7\1\0"+
    "\1\u013a\1\0\2\7\4\0\2\7\4\0\20\7\20\0"+
    "\2\7\1\0\3\7\1\0\3\7\1\0\1\7\1\0"+
    "\2\7\4\0\2\7\4\0\5\7\1\u013b\12\7\20\0"+
    "\2\7\1\0\3\7\1\0\3\7\1\0\1\u013c\1\0"+
    "\2\7\4\0\2\7\4\0\20\7\20\0\2\7";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13167];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\10\1\1\11\5\1\1\11\17\1\14\11"+
    "\4\1\1\11\2\1\2\11\2\1\1\0\6\1\1\11"+
    "\13\1\1\11\1\1\1\11\3\1\1\11\40\1\4\11"+
    "\113\1\1\0\52\1\1\11\120\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[316];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  public _PigLexer() {
    this((java.io.Reader)null);
  }


  public _PigLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _PigLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1812) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 65: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_RANK;
          }
        case 105: break;
        case 102: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_PARTITION;
          }
        case 106: break;
        case 96: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_GENERATE;
          }
        case 107: break;
        case 56: 
          { yybegin(YYINITIAL);    return PigTypes.PIG_NOT;
          }
        case 108: break;
        case 58: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_LOAD;
          }
        case 109: break;
        case 87: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_ROLLUP;
          }
        case 110: break;
        case 17: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_RP;
          }
        case 111: break;
        case 47: 
          { yybegin(YYINITIAL); return PigTypes.PIG_NOTEQ;
          }
        case 112: break;
        case 84: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_DEFINE;
          }
        case 113: break;
        case 24: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_POUND;
          }
        case 114: break;
        case 95: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_DISTINCT;
          }
        case 115: break;
        case 81: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_UNION;
          }
        case 116: break;
        case 13: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_EQUAL;
          }
        case 117: break;
        case 20: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_LBRACE;
          }
        case 118: break;
        case 33: 
          { yybegin(YYINITIAL); return PigTypes.PIG_DOUBLE_DOT;
          }
        case 119: break;
        case 31: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_BY;
          }
        case 120: break;
        case 38: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_AS;
          }
        case 121: break;
        case 48: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_BAG;
          }
        case 122: break;
        case 8: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_COLON;
          }
        case 123: break;
        case 59: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_LONG;
          }
        case 124: break;
        case 6: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_PLUS;
          }
        case 125: break;
        case 72: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_STORE;
          }
        case 126: break;
        case 92: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_COGROUP;
          }
        case 127: break;
        case 67: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_NULL;
          }
        case 128: break;
        case 89: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_FOREACH;
          }
        case 129: break;
        case 50: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_ASC;
          }
        case 130: break;
        case 66: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_INTO;
          }
        case 131: break;
        case 90: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_DEFAULT;
          }
        case 132: break;
        case 7: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_EXECCOMMAND;
          }
        case 133: break;
        case 32: 
          { yybegin(YYINITIAL);       return PigTypes.PIG_STR_OP_LT;
          }
        case 134: break;
        case 16: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_LP;
          }
        case 135: break;
        case 4: 
          { return TokenType.WHITE_SPACE;
          }
        case 136: break;
        case 80: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_USING;
          }
        case 137: break;
        case 3: 
          { yybegin(YYINITIAL); return PigTypes.PIG_ID;
          }
        case 138: break;
        case 51: 
          { yybegin(YYINITIAL);    return PigTypes.PIG_AND;
          }
        case 139: break;
        case 76: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_TUPLE;
          }
        case 140: break;
        case 14: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_COMMA;
          }
        case 141: break;
        case 52: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_SET;
          }
        case 142: break;
        case 15: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_SIMI;
          }
        case 143: break;
        case 103: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_MAPREDUCE;
          }
        case 144: break;
        case 62: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_DUMP;
          }
        case 145: break;
        case 68: 
          { yybegin(YYINITIAL);   return PigTypes.PIG_JOIN;
          }
        case 146: break;
        case 39: 
          { yybegin(YYINITIAL);       return PigTypes.PIG_STR_OP_GT;
          }
        case 147: break;
        case 86: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_STREAM;
          }
        case 148: break;
        case 91: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_DECLARE;
          }
        case 149: break;
        case 29: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_DOUBLE_LITERAL;
          }
        case 150: break;
        case 104: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_ILLUSTRATE;
          }
        case 151: break;
        case 99: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_BYTEARRAY;
          }
        case 152: break;
        case 12: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_QUOTEDSTRING;
          }
        case 153: break;
        case 9: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_DIV;
          }
        case 154: break;
        case 23: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_ARROBA;
          }
        case 155: break;
        case 19: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_RBRACKET;
          }
        case 156: break;
        case 101: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_OTHERWISE;
          }
        case 157: break;
        case 1: 
          { return TokenType.BAD_CHARACTER;
          }
        case 158: break;
        case 45: 
          { yybegin(YYINITIAL); return PigTypes.PIG_GTEQ;
          }
        case 159: break;
        case 10: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_STAR;
          }
        case 160: break;
        case 71: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_FALSE;
          }
        case 161: break;
        case 27: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_LT;
          }
        case 162: break;
        case 43: 
          { yybegin(YYINITIAL);       return PigTypes.PIG_STR_OP_NE;
          }
        case 163: break;
        case 53: 
          { yybegin(YYINITIAL);      return PigTypes.PIG_STR_OP_GTE;
          }
        case 164: break;
        case 2: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_INTEGER_LITERAL;
          }
        case 165: break;
        case 5: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_DOT;
          }
        case 166: break;
        case 46: 
          { yybegin(YYINITIAL); return PigTypes.PIG_LTEQ;
          }
        case 167: break;
        case 35: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_DCOLON;
          }
        case 168: break;
        case 83: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_FILTER;
          }
        case 169: break;
        case 88: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_FLATTEN;
          }
        case 170: break;
        case 28: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_LONG_LITERAL;
          }
        case 171: break;
        case 73: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_SPLIT;
          }
        case 172: break;
        case 60: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_FULL;
          }
        case 173: break;
        case 85: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_DOUBLE;
          }
        case 174: break;
        case 93: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_STR_OP_MATCHES;
          }
        case 175: break;
        case 63: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_CUBE;
          }
        case 176: break;
        case 74: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_CROSS;
          }
        case 177: break;
        case 97: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_REGISTER;
          }
        case 178: break;
        case 70: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_FLOAT;
          }
        case 179: break;
        case 77: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_RIGHT;
          }
        case 180: break;
        case 49: 
          { yybegin(YYINITIAL);      return PigTypes.PIG_STR_OP_LTE;
          }
        case 181: break;
        case 26: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_GT;
          }
        case 182: break;
        case 18: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_LBRACKET;
          }
        case 183: break;
        case 79: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_OUTER;
          }
        case 184: break;
        case 75: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_GROUP;
          }
        case 185: break;
        case 37: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_END_OF_LINE_COMMENT;
          }
        case 186: break;
        case 55: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_INT;
          }
        case 187: break;
        case 22: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_QMARK;
          }
        case 188: break;
        case 25: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_PERCENT;
          }
        case 189: break;
        case 64: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_TRUE;
          }
        case 190: break;
        case 100: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_CHARARRAY;
          }
        case 191: break;
        case 94: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_DATETIME;
          }
        case 192: break;
        case 40: 
          { yybegin(YYINITIAL);     return PigTypes.PIG_OR;
          }
        case 193: break;
        case 42: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_IS;
          }
        case 194: break;
        case 57: 
          { yybegin(YYINITIAL);   return PigTypes.PIG_LEFT;
          }
        case 195: break;
        case 44: 
          { yybegin(YYINITIAL); return PigTypes.PIG_EQEQ;
          }
        case 196: break;
        case 61: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_DESC;
          }
        case 197: break;
        case 98: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_PARALLEL;
          }
        case 198: break;
        case 11: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_MINUS;
          }
        case 199: break;
        case 30: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_FLOAT_LITERAL;
          }
        case 200: break;
        case 78: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_ORDER;
          }
        case 201: break;
        case 69: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_LIMIT;
          }
        case 202: break;
        case 34: 
          { yybegin(YYINITIAL);       return PigTypes.PIG_STR_OP_EQ;
          }
        case 203: break;
        case 21: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_RBRACE;
          }
        case 204: break;
        case 54: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_MAP;
          }
        case 205: break;
        case 41: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_IF;
          }
        case 206: break;
        case 36: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_C_STYLE_COMMENT;
          }
        case 207: break;
        case 82: 
          { yybegin(YYINITIAL);  return PigTypes.PIG_INNER;
          }
        case 208: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
